<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zyb&#39;Blog</title>
  
  <subtitle>这里的故事还在继续</subtitle>
  <link href="http://qwd.ai/atom.xml" rel="self"/>
  
  <link href="http://qwd.ai/"/>
  <updated>2023-12-14T11:23:49.000Z</updated>
  <id>http://qwd.ai/</id>
  
  <author>
    <name>Nohup</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Frida 脱离pc 方案、免Root方案</title>
    <link href="http://qwd.ai/2023/12/14/Frida-%E8%84%B1%E7%A6%BBpc-%E6%96%B9%E6%A1%88%E3%80%81%E5%85%8DRoot%E6%96%B9%E6%A1%88/"/>
    <id>http://qwd.ai/2023/12/14/Frida-%E8%84%B1%E7%A6%BBpc-%E6%96%B9%E6%A1%88%E3%80%81%E5%85%8DRoot%E6%96%B9%E6%A1%88/</id>
    <published>2023-12-14T11:23:49.000Z</published>
    <updated>2023-12-14T11:23:49.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>目的是实现像Xposed插件的效果，脱离电脑也能使用frida<h2 id="frida-Inject"><a href="#frida-Inject" class="headerlink" title="frida-Inject"></a>frida-Inject</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>Frida-Inject 是一个基于 Frida 的工具，用于动态注入代码到运行中的进程中，以便进行应用程序的分析、逆向工程和调试。Frida 本身是一个强大的动态分析工具，它允许研究人员在运行时修改、监视和分析应用程序，无需访问应用程序的源代码。</p><p>Frida-Inject 就是类似于Frida-Server</p><p>不一样的是Frida-Server需要用usb链接电脑，通过电脑的frida-tools等frida命令来操作</p><p>而Frida-Inject直接可以在android内部执行frida命令</p><p>首先查看手机架构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure><p>然后去官网下载frida-inject，版本不必与pc同步，与pc没有直接关联</p><p>下载完成后解压到&#x2F;data&#x2F;local&#x2F;tmp下</p><p>赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 frida-inject</span><br></pre></td></tr></table></figure><p>直接可以使用了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /data/local/tmp/frida-inject-16.1.4-android-arm64 -f  com.xxx.xxx  -s  /data/local/jsHookScripts/Hook.js &amp;</span><br></pre></td></tr></table></figure><p>这种做法是没有pc的时候的一种方案有，pc的话建议还是用frida-server</p><h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3><p>如果是想做rpc的话，但是手头又没有pc，那么frida-Inject是个非常好的选择</p><p>推荐使用Sekiro</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">SekiroClient</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">e</span>) &#123; <span class="variable language_">this</span>.<span class="property">handlers</span> = &#123;&#125;, <span class="variable language_">this</span>.<span class="property">isConnecting</span> = !<span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">sekiroOption</span> = e, e.<span class="property">serverHost</span> = e.<span class="property">serverHost</span> || <span class="string">&quot;sekiro.iinti.cn&quot;</span>, e.<span class="property">serverPort</span> = e.<span class="property">serverPort</span> || <span class="number">5612</span>, <span class="variable language_">this</span>.<span class="property">fridaSocketConfig</span> = &#123; <span class="attr">family</span>: <span class="string">&quot;ipv4&quot;</span>, <span class="attr">host</span>: e.<span class="property">serverHost</span>, <span class="attr">port</span>: e.<span class="property">serverPort</span> &#125;, <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;           welcome to use sekiro framework,\n      for more support please visit our website: https://iinti.cn\n&quot;</span>), <span class="variable language_">this</span>.<span class="title function_">doConnect</span>() &#125; <span class="keyword">return</span> e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">registerAction</span> = <span class="keyword">function</span> (<span class="params">e, t</span>) &#123; <span class="variable language_">this</span>.<span class="property">handlers</span>[e] = t &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reConnect</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> e = <span class="variable language_">this</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro try connection after 5s&quot;</span>), <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> e.<span class="title function_">doConnect</span>() &#125;, <span class="number">5e3</span>) &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">doConnect</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> e = <span class="variable language_">this</span>; <span class="variable language_">this</span>.<span class="property">isConnecting</span> || (<span class="variable language_">this</span>.<span class="property">isConnecting</span> = !<span class="number">0</span>, <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro connect to server-&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">fridaSocketConfig</span>.<span class="property">host</span> + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="property">fridaSocketConfig</span>.<span class="property">port</span>), <span class="title class_">Socket</span>.<span class="title function_">connect</span>(<span class="variable language_">this</span>.<span class="property">fridaSocketConfig</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123; e.<span class="property">isConnecting</span> = !<span class="number">1</span>, t.<span class="title function_">setNoDelay</span>(!<span class="number">0</span>), e.<span class="property">conn</span> = t, e.<span class="title function_">connRead</span>(), e.<span class="title function_">connWrite</span>(&#123; <span class="attr">type</span>: <span class="number">16</span>, <span class="attr">serialNumber</span>: -<span class="number">1</span>, <span class="attr">headers</span>: &#123; <span class="attr">SEKIRO_GROUP</span>: e.<span class="property">sekiroOption</span>.<span class="property">sekiroGroup</span>, <span class="attr">SEKIRO_CLIENT_ID</span>: e.<span class="property">sekiroOption</span>.<span class="property">clientId</span> &#125; &#125;) &#125;)[<span class="string">&quot;catch&quot;</span>](<span class="keyword">function</span> (<span class="params">t</span>) &#123; e.<span class="property">isConnecting</span> = !<span class="number">1</span>, <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro connect failed&quot;</span>, t), e.<span class="title function_">reConnect</span>() &#125;)) &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">connWrite</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">var</span> t = <span class="variable language_">this</span>; <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="property">output</span>.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="title function_">encodeSekiroPacket</span>(e))[<span class="string">&quot;catch&quot;</span>](<span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro write register cmd failed&quot;</span>, e), t.<span class="title function_">reConnect</span>() &#125;) &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">connRead</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> e = <span class="variable language_">this</span>; <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="property">input</span>.<span class="title function_">read</span>(<span class="number">1024</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">t</span>) &#123; <span class="keyword">return</span> t.<span class="property">byteLength</span> &lt;= <span class="number">0</span> ? (e.<span class="property">conn</span>.<span class="title function_">close</span>(), <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro server lost!&quot;</span>), <span class="keyword">void</span> e.<span class="title function_">reConnect</span>()) : (e.<span class="title function_">onServerData</span>(t), <span class="keyword">void</span> <span class="title function_">setImmediate</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; e.<span class="title function_">connRead</span>() &#125;)) &#125;)[<span class="string">&quot;catch&quot;</span>](<span class="keyword">function</span> (<span class="params">t</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro read_loop error&quot;</span>, t), e.<span class="title function_">reConnect</span>() &#125;) &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">onServerData</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">var</span> t = <span class="variable language_">this</span>; <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readBuffer</span>) &#123; <span class="keyword">if</span> (e) &#123; <span class="keyword">var</span> n = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="property">byteLength</span> + e.<span class="property">byteLength</span>), o = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(n); o.<span class="title function_">set</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="variable language_">this</span>.<span class="property">readBuffer</span>), <span class="number">0</span>), o.<span class="title function_">set</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(e), <span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="property">byteLength</span>), <span class="variable language_">this</span>.<span class="property">readBuffer</span> = n &#125; &#125; <span class="keyword">else</span> &#123; <span class="keyword">if</span> (!e) <span class="keyword">return</span>; <span class="variable language_">this</span>.<span class="property">readBuffer</span> = e &#125; <span class="keyword">var</span> r = <span class="variable language_">this</span>.<span class="title function_">decodeSekiroPacket</span>(); r &amp;&amp; (<span class="variable language_">this</span>.<span class="title function_">handleServerPkg</span>(r), <span class="title function_">setImmediate</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> t.<span class="title function_">onServerData</span>() &#125;)) &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">encodeSekiroFastJSON</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span>; e.<span class="property">msg</span> &amp;&amp; (t = <span class="variable language_">this</span>.<span class="title function_">str2Uint8</span>(e.<span class="property">msg</span>)); <span class="keyword">var</span> n = <span class="keyword">void</span> <span class="number">0</span>; e.<span class="property">data</span> &amp;&amp; (n = <span class="variable language_">this</span>.<span class="title function_">str2Uint8</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e.<span class="property">data</span>))); <span class="keyword">var</span> o = <span class="number">8</span> + (t ? t.<span class="property">length</span> : <span class="number">0</span>) + <span class="number">4</span> + (n ? n.<span class="property">length</span> : <span class="number">0</span>), r = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(o), i = <span class="keyword">new</span> <span class="title class_">DataView</span>(r); i.<span class="title function_">setInt32</span>(<span class="number">0</span>, e.<span class="property">status</span>), i.<span class="title function_">setInt32</span>(<span class="number">4</span>, t ? t.<span class="property">length</span> : <span class="number">0</span>); <span class="keyword">var</span> s = <span class="number">8</span>; <span class="keyword">return</span> t &amp;&amp; (<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r, <span class="number">8</span>).<span class="title function_">set</span>(t), s += t.<span class="property">length</span>), i.<span class="title function_">setInt32</span>(s, n ? n.<span class="property">length</span> : <span class="number">0</span>), s += <span class="number">4</span>, n &amp;&amp; <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r, s).<span class="title function_">set</span>(n), r &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">handleServerPkg</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">if</span> (<span class="number">0</span> == e.<span class="property">type</span>) <span class="keyword">return</span> <span class="keyword">void</span> <span class="variable language_">this</span>.<span class="title function_">connWrite</span>(e); <span class="keyword">if</span> (<span class="number">32</span> != e.<span class="property">type</span>) <span class="keyword">return</span> <span class="keyword">void</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;unknown server message:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e)); <span class="keyword">var</span> t = <span class="variable language_">this</span>, n = <span class="keyword">function</span> (<span class="params">n</span>) &#123; t.<span class="title function_">connWrite</span>(&#123; <span class="attr">type</span>: <span class="number">17</span>, <span class="attr">serialNumber</span>: e.<span class="property">serialNumber</span>, <span class="attr">headers</span>: &#123; <span class="attr">PAYLOAD_CONTENT_TYPE</span>: <span class="string">&quot;CONTENT_TYPE_SEKIRO_FAST_JSON&quot;</span> &#125;, <span class="attr">data</span>: t.<span class="title function_">encodeSekiroFastJSON</span>(n) &#125;) &#125;, o = &#123; <span class="attr">resolve</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="title function_">n</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">data</span>: e &#125;) &#125;, <span class="attr">reject</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="title function_">n</span>(&#123; <span class="attr">status</span>: -<span class="number">1</span>, <span class="attr">msg</span>: e &#125;) &#125; &#125;; <span class="keyword">if</span> (!e.<span class="property">data</span>) <span class="keyword">return</span> <span class="keyword">void</span> o.<span class="title function_">reject</span>(<span class="string">&quot;sekiro system error, no request payload present!!&quot;</span>); <span class="keyword">var</span> r = <span class="variable language_">this</span>.<span class="title function_">uint8toStr</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(e.<span class="property">data</span>)); <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro receive request: &quot;</span> + r); <span class="keyword">var</span> i = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(r); <span class="keyword">if</span> (!i.<span class="property">action</span>) <span class="keyword">return</span> <span class="keyword">void</span> o.<span class="title function_">reject</span>(<span class="string">&quot;the param: &#123;action&#125; not presented!!&quot;</span>); <span class="keyword">var</span> s = <span class="variable language_">this</span>.<span class="property">handlers</span>[i.<span class="property">action</span>]; <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="keyword">void</span> o.<span class="title function_">reject</span>(<span class="string">&quot;sekiro no handler for this action&quot;</span>); <span class="keyword">try</span> &#123; <span class="title function_">s</span>(i, o.<span class="property">resolve</span>, o.<span class="property">reject</span>) &#125; <span class="keyword">catch</span> (c) &#123; o.<span class="title function_">reject</span>(<span class="string">&quot;sekiro handler error:&quot;</span> + c + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(c)) &#125; &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">decodeSekiroPacket</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">readBuffer</span>) <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>; <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="title class_">DataView</span>(<span class="variable language_">this</span>.<span class="property">readBuffer</span>), t = e.<span class="title function_">getInt32</span>(<span class="number">0</span>), n = e.<span class="title function_">getInt32</span>(<span class="number">4</span>); <span class="keyword">if</span> (<span class="number">1936026473</span> != t || <span class="number">1919889457</span> != n) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro packet data&quot;</span>), <span class="variable language_">this</span>.<span class="property">conn</span>.<span class="title function_">close</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sekiro close broken pipe&quot;</span>) &#125;), <span class="keyword">void</span> (<span class="variable language_">this</span>.<span class="property">readBuffer</span> = <span class="keyword">void</span> <span class="number">0</span>); <span class="keyword">var</span> o = e.<span class="title function_">getInt32</span>(<span class="number">8</span>); <span class="keyword">if</span> (!(<span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="property">byteLength</span> &lt; o + <span class="number">12</span>)) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> r = e.<span class="title function_">getInt8</span>(<span class="number">12</span>), i = e.<span class="title function_">getInt32</span>(<span class="number">13</span>), s = e.<span class="title function_">getInt8</span>(<span class="number">17</span>), c = <span class="number">18</span>, a = &#123;&#125;, f = <span class="number">0</span>; s &gt; f; f++) &#123; <span class="keyword">var</span> u = e.<span class="title function_">getInt8</span>(c++), h = <span class="variable language_">this</span>.<span class="title function_">uint8toStr</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="title function_">slice</span>(c, u))); c += u; <span class="keyword">var</span> l = e.<span class="title function_">getInt8</span>(c++), d = <span class="string">&quot;&quot;</span>; l &gt; <span class="number">0</span> &amp;&amp; (d = <span class="variable language_">this</span>.<span class="title function_">uint8toStr</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="title function_">slice</span>(c, l))), c += l), a[h] = d &#125; <span class="keyword">var</span> p = <span class="keyword">void</span> <span class="number">0</span>, y = o + <span class="number">12</span> - c; <span class="keyword">return</span> y &gt; <span class="number">0</span> &amp;&amp; (p = <span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="title function_">slice</span>(c, c + y)), <span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="property">byteLength</span> == o + <span class="number">12</span> ? <span class="variable language_">this</span>.<span class="property">readBuffer</span> = <span class="keyword">void</span> <span class="number">0</span> : <span class="variable language_">this</span>.<span class="property">readBuffer</span> = <span class="variable language_">this</span>.<span class="property">readBuffer</span>.<span class="title function_">slice</span>(c), &#123; <span class="attr">type</span>: r, <span class="attr">serialNumber</span>: i, <span class="attr">headers</span>: a, <span class="attr">data</span>: p &#125; &#125; &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">encodeSekiroPacket</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">var</span> t = <span class="number">6</span>, n = []; <span class="keyword">for</span> (<span class="keyword">var</span> o <span class="keyword">in</span> e.<span class="property">headers</span>) n.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">str2Uint8</span>(o)), n.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">str2Uint8</span>(e.<span class="property">headers</span>[o])), t += <span class="number">2</span>; t += n.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">e, t</span>) &#123; <span class="keyword">return</span> e + t.<span class="property">length</span> &#125;, <span class="number">0</span>), e.<span class="property">data</span> &amp;&amp; (t += e.<span class="property">data</span>.<span class="property">byteLength</span>); <span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(t + <span class="number">12</span>), i = <span class="keyword">new</span> <span class="title class_">DataView</span>(r); i.<span class="title function_">setUint32</span>(<span class="number">0</span>, <span class="number">1936026473</span>), i.<span class="title function_">setUint32</span>(<span class="number">4</span>, <span class="number">1919889457</span>), i.<span class="title function_">setInt32</span>(<span class="number">8</span>, t), i.<span class="title function_">setInt8</span>(<span class="number">12</span>, e.<span class="property">type</span>), i.<span class="title function_">setInt32</span>(<span class="number">13</span>, e.<span class="property">serialNumber</span>), i.<span class="title function_">setInt8</span>(<span class="number">17</span>, <span class="title class_">Object</span>.<span class="title function_">keys</span>(e.<span class="property">headers</span>).<span class="property">length</span>); <span class="keyword">var</span> s = <span class="number">18</span>; <span class="keyword">return</span> n.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123; i.<span class="title function_">setInt8</span>(s++, e.<span class="property">length</span>), <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r, s).<span class="title function_">set</span>(e), s += e.<span class="property">length</span> &#125;), e.<span class="property">data</span> &amp;&amp; <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r, s).<span class="title function_">set</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(e.<span class="property">data</span>)), r &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">uint8toStr</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> t, n, o = <span class="number">0</span>, r = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">65536</span>, e.<span class="property">length</span> + <span class="number">1</span>), i = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>(r), s = [], c = <span class="number">0</span>, a = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> a = o &lt; e.<span class="property">length</span>; <span class="keyword">if</span> (!a || c &gt;= r - <span class="number">1</span>) &#123; <span class="keyword">var</span> f = i.<span class="title function_">subarray</span>(<span class="number">0</span>, c), u = []; <span class="keyword">if</span> (f.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">return</span> u.<span class="title function_">push</span>(e) &#125;), s.<span class="title function_">push</span>(<span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, u)), !a) <span class="keyword">return</span> &#123; <span class="attr">value</span>: s.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) &#125;; e = e.<span class="title function_">subarray</span>(o), o = <span class="number">0</span>, c = <span class="number">0</span> &#125; <span class="keyword">var</span> h = e[o++]; <span class="keyword">if</span> (<span class="number">0</span> === (<span class="number">128</span> &amp; h)) i[c++] = h; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">192</span> === (<span class="number">224</span> &amp; h)) n = <span class="number">63</span> &amp; e[o++], i[c++] = (<span class="number">31</span> &amp; h) &lt;&lt; <span class="number">6</span> | n; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">224</span> === (<span class="number">240</span> &amp; h)) n = <span class="number">63</span> &amp; e[o++], t = <span class="number">63</span> &amp; e[o++], i[c++] = (<span class="number">31</span> &amp; h) &lt;&lt; <span class="number">12</span> | n &lt;&lt; <span class="number">6</span> | t; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">240</span> === (<span class="number">248</span> &amp; h)) &#123; n = <span class="number">63</span> &amp; e[o++], t = <span class="number">63</span> &amp; e[o++]; <span class="keyword">var</span> l = <span class="number">63</span> &amp; e[o++], d = (<span class="number">7</span> &amp; h) &lt;&lt; <span class="number">18</span> | n &lt;&lt; <span class="number">12</span> | t &lt;&lt; <span class="number">6</span> | l; d &gt; <span class="number">65535</span> &amp;&amp; (d -= <span class="number">65536</span>, i[c++] = d &gt;&gt;&gt; <span class="number">10</span> &amp; <span class="number">1023</span> | <span class="number">55296</span>, d = <span class="number">56320</span> | <span class="number">1023</span> &amp; d), i[c++] = d &#125; &#125;; ;) &#123; <span class="keyword">var</span> f = <span class="title function_">a</span>(); <span class="keyword">if</span> (<span class="string">&quot;object&quot;</span> == <span class="keyword">typeof</span> f) <span class="keyword">return</span> f.<span class="property">value</span> &#125; &#125;, e.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">str2Uint8</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>, n = e.<span class="property">length</span>, o = <span class="number">0</span>, r = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">32</span>, n + (n &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">7</span>), i = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r &gt;&gt;&gt; <span class="number">3</span> &lt;&lt; <span class="number">3</span>); n &gt; t;) &#123; <span class="keyword">var</span> s = e.<span class="title function_">charCodeAt</span>(t++); <span class="keyword">if</span> (s &gt;= <span class="number">55296</span> &amp;&amp; <span class="number">56319</span> &gt;= s) &#123; <span class="keyword">if</span> (n &gt; t) &#123; <span class="keyword">var</span> c = e.<span class="title function_">charCodeAt</span>(t); <span class="number">56320</span> === (<span class="number">64512</span> &amp; c) &amp;&amp; (++t, s = ((<span class="number">1023</span> &amp; s) &lt;&lt; <span class="number">10</span>) + (<span class="number">1023</span> &amp; c) + <span class="number">65536</span>) &#125; <span class="keyword">if</span> (s &gt;= <span class="number">55296</span> &amp;&amp; <span class="number">56319</span> &gt;= s) <span class="keyword">continue</span> &#125; <span class="keyword">if</span> (o + <span class="number">4</span> &gt; i.<span class="property">length</span>) &#123; r += <span class="number">8</span>, r *= <span class="number">1</span> + t / e.<span class="property">length</span> * <span class="number">2</span>, r = r &gt;&gt;&gt; <span class="number">3</span> &lt;&lt; <span class="number">3</span>; <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r); a.<span class="title function_">set</span>(i), i = a &#125; <span class="keyword">if</span> (<span class="number">0</span> !== (<span class="number">4294967168</span> &amp; s)) &#123; <span class="keyword">if</span> (<span class="number">0</span> === (<span class="number">4294965248</span> &amp; s)) i[o++] = s &gt;&gt;&gt; <span class="number">6</span> &amp; <span class="number">31</span> | <span class="number">192</span>; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> === (<span class="number">4294901760</span> &amp; s)) i[o++] = s &gt;&gt;&gt; <span class="number">12</span> &amp; <span class="number">15</span> | <span class="number">224</span>, i[o++] = s &gt;&gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>; <span class="keyword">else</span> &#123; <span class="keyword">if</span> (<span class="number">0</span> !== (<span class="number">4292870144</span> &amp; s)) <span class="keyword">continue</span>; i[o++] = s &gt;&gt;&gt; <span class="number">18</span> &amp; <span class="number">7</span> | <span class="number">240</span>, i[o++] = s &gt;&gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>, i[o++] = s &gt;&gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span> &#125; i[o++] = <span class="number">63</span> &amp; s | <span class="number">128</span> &#125; <span class="keyword">else</span> i[o++] = s &#125; <span class="keyword">return</span> i.<span class="property">slice</span> ? i.<span class="title function_">slice</span>(<span class="number">0</span>, o) : i.<span class="title function_">subarray</span>(<span class="number">0</span>, o) &#125;, e &#125;();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">str</span>) &#123;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     这里写导出操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> <span class="title class_">SekiroClient</span>(&#123; <span class="attr">sekiroGroup</span>: <span class="string">&quot;xxx&quot;</span>, <span class="attr">clientId</span>: <span class="string">&quot;xxx&quot;</span>,<span class="attr">serverHost</span>:<span class="string">&quot;xxx.xxx.xxx&quot;</span>,<span class="attr">serverPort</span>:<span class="number">5621</span>&#125;);</span><br><span class="line">client.<span class="title function_">registerAction</span>(<span class="string">&quot;testAction&quot;</span>, <span class="keyword">function</span> (<span class="params">request, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="title function_">encrypt</span>(request[<span class="string">&#x27;Str&#x27;</span>]));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>建立好连接后直接就能远程调用了</p><h2 id="frida-Gadget"><a href="#frida-Gadget" class="headerlink" title="frida-Gadget"></a>frida-Gadget</h2><p>如果手机没有root权限，那么使用friada-Gadget是最好的选择</p><p>对于有so的app</p><p>简单说就是把frida-gadget.so 强行附加到app的so文件加载流程中，配合frida-gadget.so.config(配置frida-gadget，注入脚本路径等） 实现免root 注入</p><p>首先拉取<a href="https://github.com/nszdhd1/UtilScript/tree/main%E4%BB%A3%E7%A0%81">https://github.com/nszdhd1/UtilScript/tree/main代码</a></p><p>该库的核心思想是将apk解包，感染so文件，再重打包签名</p><p>流程：</p><ol><li><p>对apk解包</p></li><li><p>找到要注入的so文件名 比如是libfuai.so</p></li><li><p>执行命令<code>python3 LIEFInjectFrida.py ./qiyuan.apk ./  libfuai.so  -apksign -persistence </code></p><p>第一个参数是要感染的apk文件路径，第二个是要导出的apk文件路径，第三个是要感染的so文件，第四个是签名，第五个不知道干嘛的最好加上</p><p>假如是mac笔记本还需要对代码进行一些修改，例如路径的双斜杠等问题</p><p>另外apk签名的apksignerNew.jar也比较老，会出现很多问题，这里建议直接使用brew安装后的apksigner命令</p><p>修改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd = &#x27;apksigner sign --ks %s --ks-key-alias %s --ks-pass pass:%s --key-pass pass:%s --out %s %s&#x27;% \</span><br><span class="line">              (keystore, alias,pswd,aliaspswd,outfile,apk_path)</span><br></pre></td></tr></table></figure></li><li><p>导出apk文件，安装到手机上，然后将js文件放入到事先配置好的路径下</p><p>例如现在的配置是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;interaction&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/data/local/tmp/frida_script.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;on_change&quot;</span><span class="punctuation">:</span><span class="string">&quot;reload&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>那么只需要将hook代码写入到&#x2F;data&#x2F;local&#x2F;tmp&#x2F;frida_script.js，打开重签名的apk即可。</p></li></ol><p>该方式的弊端就是无法避免apkd的签名校验，看网上大佬说的是最好还是用IO重定向的方式，可以过掉签名检测</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
目的是实现像Xposed插件的效果，脱离电脑也能使用frida

&lt;h2 id=&quot;frida-Inject&quot;&gt;&lt;a href=&quot;#frida-Inject&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Frida" scheme="http://qwd.ai/categories/Frida/"/>
    
    
  </entry>
  
  <entry>
    <title>瑞数安全（4、5、6、vmp版本）方案(2)</title>
    <link href="http://qwd.ai/2023/10/28/%E7%91%9E%E6%95%B0%E5%AE%89%E5%85%A8%EF%BC%884%E3%80%815%E3%80%816%E3%80%81vmp%E7%89%88%E6%9C%AC%EF%BC%89%E6%96%B9%E6%A1%88-2/"/>
    <id>http://qwd.ai/2023/10/28/%E7%91%9E%E6%95%B0%E5%AE%89%E5%85%A8%EF%BC%884%E3%80%815%E3%80%816%E3%80%81vmp%E7%89%88%E6%9C%AC%EF%BC%89%E6%96%B9%E6%A1%88-2/</id>
    <published>2023-10-28T10:25:34.000Z</published>
    <updated>2023-10-28T10:25:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>提前说一句： 所有版本均可rpc通杀，一键注入、高并发采集；但是吃机器性能、不太方便，不过是一个很好的临时方案。</p><p>这里主要说明补环境方案</p><h2 id="Rs5"><a href="#Rs5" class="headerlink" title="Rs5"></a>Rs5</h2><p>网址 : <code>aHR0cHM6Ly9iaWRkaW5nLnN5c3UuZWR1LmNuL2luZm9ybWF0aW9uL25vdGljZQ==</code></p><h3 id="Rs5-Cookie分析"><a href="#Rs5-Cookie分析" class="headerlink" title="Rs5 Cookie分析"></a>Rs5 Cookie分析</h3><p><code>ZMRhjlxmTSDe443S</code>: 第一次请求返回。</p><p>ghDuiPNsEBSVMaMDUj1PvfwD5Mque8iERsLq96oHPxWAF6P0w79j2_mJj.mLFgiH</p><p><code>ZMRhjlxmTSDe443T</code>：第一次请求返回来的content、自执行函数、和ts.js文件生成，瑞数核心算法、环境检测，全在这里头了。</p><p>5l_Zh6CRXjrzYnAPT8.zBxJDG8x4QNmVP5QxNzVbvNSdn_ALUFyqlPqgpo6UpYHYnemQNsm6B9iKxIHk6bMQOq_eqA7PTmdW87OH4FjPVprz0bxrsdoz0Fsls_SEkVsdAaXoFQMo3OuPyipFiN7HW4v3BXexJxkCBkbW_NqckT46BgVnAx1L1pvVRb2T6aKal47UFV3YUMLbsCMXBWtW4rICVpO79DWW_zBqB.v.KkMdRBvzXl.VEM.9rnZ9dv1bjQq4WM7XR9yUMnQzsC03J9XyATeNU8TvtWTQHcmKkPEyXZLI75euA.8C54_CnOslc5.R62X5CRar55FGdcgYWN9UR</p><h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a><strong>请求流程</strong></h3><p>第一次请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://bidding.sysu.edu.cn/information/notice&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://bidding.sysu.edu.cn/information/notice?page=1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;118&quot;, &quot;Google Chrome&quot;;v=&quot;118&quot;, &quot;Not=A?Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = session.get(</span><br><span class="line">    url,</span><br><span class="line">    cookies=cookies,</span><br><span class="line">    headers=headers</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">response.encoding = response.apparent_encoding</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一次请求状态码----&gt;&#x27;</span>,response.status_code)</span><br><span class="line">cookies = response.cookies.get_dict()</span><br><span class="line">Str = response.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;固定.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(Str)</span><br></pre></td></tr></table></figure><p>返回状态码是<strong>412</strong></p><p>返回的文本如下</p><p><img src="https://p.ipic.vip/38auvh.png" alt="image-20231028172417957"></p><p>我们提取出 <code>content</code>,<code>auto_js</code>,<code>ts_url</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配出content</span></span><br><span class="line">content = re.findall(<span class="string">&#x27;&lt;meta content=&quot;(.*?)&quot;&#x27;</span>, Str)[<span class="number">0</span>] <span class="comment"># content</span></span><br><span class="line">auto_js = re.findall(<span class="string">&#x27;r=&quot;m&quot;&gt;(\(function\(\).*?)&lt;/script&gt;&#x27;</span>, Str,re.S|re.I)[<span class="number">0</span>] <span class="comment"># 自执行函数</span></span><br><span class="line">ts_url = re.findall(<span class="string">&#x27;src=&quot;(.*?js)&quot; r=&#x27;</span>,Str,re.S|re.I)[<span class="number">0</span>] <span class="comment"># js文件</span></span><br><span class="line">ts_url = <span class="string">f&#x27;https://bidding.sysu.edu.cn<span class="subst">&#123;ts_url&#125;</span>&#x27;</span></span><br><span class="line">logger.debug(<span class="string">f&#x27;ts_url:<span class="subst">&#123;ts_url&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下一步就是结合这三个条件，生成我们要的<code>ZMRhjlxmTSDe443T</code>打出第二次请求</p><h3 id="补环境结构"><a href="#补环境结构" class="headerlink" title="补环境结构"></a>补环境结构</h3><p>env就是我们要补的环境，nodejs 执行这段代码后，会对document.cookie赋值，也就是ZMRhjlxmTSDe443T，我们导出即可</p><p><img src="https://p.ipic.vip/u7hn52.png" alt="image-20231028172945103"></p><h3 id="补环境过程"><a href="#补环境过程" class="headerlink" title="补环境过程"></a>补环境过程</h3><p>首先把content、自执行函数、ts文件放入js代码中，这步很简单，会复制粘贴就行</p><p><img src="https://p.ipic.vip/febyan.png" alt="image-20231028173420494"></p><p>我们只需要在补环境那块，填入我们的环境代码即可。</p><p>那么，现在开始正式补环境！</p><p>首先，最基本的，<code>window</code> <code>location</code> <code>document</code> <code>navigator</code> 先补进去</p><p>location我们把最常见的那几个维度的字段，先提前补进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="built_in">setTimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span> = <span class="variable language_">global</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">top</span> = <span class="variable language_">window</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">self</span> = <span class="variable language_">window</span>;</span><br><span class="line">location = &#123;</span><br><span class="line">  <span class="attr">href</span>: <span class="string">&#x27;https://bidding.sysu.edu.cn/information/notice?page=1&#x27;</span>,</span><br><span class="line">  <span class="attr">protocol</span>: <span class="string">&quot;https:&quot;</span>,</span><br><span class="line">  <span class="attr">origin</span>: <span class="string">&quot;https://bidding.sysu.edu.cn&quot;</span>,</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&quot;bidding.sysu.edu.cn&quot;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&quot;bidding.sysu.edu.cn&quot;</span>,</span><br><span class="line">  <span class="attr">search</span>: <span class="string">&quot;?page=1&quot;</span>,</span><br><span class="line">  <span class="attr">hash</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">pathname</span>: <span class="string">&quot;/information/notice&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">navigator = &#123;</span><br><span class="line">  <span class="attr">userAgent</span>:</span><br><span class="line">  <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">  <span class="attr">webdriver</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">platform</span>: <span class="string">&quot;MacIntel&quot;</span>,</span><br><span class="line">  <span class="attr">languages</span>: [<span class="string">&quot;zh-CN&quot;</span>, <span class="string">&quot;zh&quot;</span>, <span class="string">&quot;en&quot;</span>],</span><br><span class="line">  <span class="attr">appVersion</span>:</span><br><span class="line">    <span class="string">&quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">  <span class="attr">webkitPersistentStorage</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">getBattery</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;navigator.getBattery---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;,</span><br><span class="line">  <span class="attr">connection</span>: &#123;</span><br><span class="line">    <span class="attr">downlink</span>: <span class="number">1.3</span>,</span><br><span class="line">    <span class="attr">effectiveType</span>: <span class="string">&quot;3g&quot;</span>,</span><br><span class="line">    <span class="attr">rtt</span>: <span class="number">550</span>,</span><br><span class="line">    <span class="attr">saveData</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span> = &#123;</span><br><span class="line">  <span class="attr">charset</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">  <span class="attr">characterSet</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 不管哪个版本的瑞数，我们都能这样先补一下</p><p>然后上代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">window</span>, &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, property, value, receiver</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;设置属性set window&quot;</span>, property, <span class="keyword">typeof</span> value);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, property, receiver</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取属性get window&quot;</span>, property, <span class="keyword">typeof</span> target[property]);</span><br><span class="line">      <span class="keyword">if</span> (target[property]==<span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="comment">// debugger;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target[property]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">proxy_array</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; proxy_array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">eval</span>(</span><br><span class="line">      proxy_array[i] +</span><br><span class="line">        <span class="string">`= new Proxy(`</span> +</span><br><span class="line">        proxy_array[i] +</span><br><span class="line">        <span class="string">`, &#123;</span></span><br><span class="line"><span class="string">          get(target, key) &#123;</span></span><br><span class="line"><span class="string">            if(key == &#x27;parentElement&#x27;)&#123;</span></span><br><span class="line"><span class="string">              // debugger;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            console.log(&#x27;----------------------&#x27;)</span></span><br><span class="line"><span class="string">            console.log( &#x27;【`</span> +</span><br><span class="line">        proxy_array[i] +</span><br><span class="line">        <span class="string">`】取属性 &#x27; + key + &#x27; 值: &#x27; + target[key] + &#x27;, 详细位置debugger查看&#x27;);</span></span><br><span class="line"><span class="string">            console.log(&#x27;----------------------&#x27;)</span></span><br><span class="line"><span class="string">            if (target[key]==clearInterval)&#123;</span></span><br><span class="line"><span class="string">              debugger;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return target[key];</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">      &#125;);`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数组中放入需要代理的对象</span></span><br><span class="line"><span class="keyword">var</span> proxy_array = [</span><br><span class="line">  <span class="string">&quot;document&quot;</span>,</span><br><span class="line">  <span class="string">&quot;navigator&quot;</span>,</span><br><span class="line">  <span class="string">&quot;location&quot;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="title function_">proxy</span>(proxy_array);</span><br></pre></td></tr></table></figure><p>代理也是固定的，放到补的环境下面即可</p><p>下一步，开始调试，mac用户按 fn+F5开始调试即可</p><p>提前约定一下，遇到如下图这种windows 某个属性 undefind的，如果是函数，我们就暂时补充一个空函数,打印入参即可，如果是字段，先去官网调试下是什么类型的，一般就是对象类型或者字符串，直接补空的即可。</p><p>如果是$开头的属性呢，直接跳过就好啦，因为正常来说windows 不会有这些属性</p><p><img src="https://p.ipic.vip/02imk2.png" alt="image-20231028174313663"></p><p>例如上图，我们就可以这么补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">execScript</span> = <span class="built_in">eval</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.XMLHttpRequest---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ActiveXObject</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.ActiveXObject---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br></pre></td></tr></table></figure><p>后面会有一堆这种的，我就不在一个个说了</p><p>补完继续调试</p><p><img src="https://p.ipic.vip/lwf571.png" alt="image-20231028174734620"></p><p>很明显了，需要补document.createElement</p><p>我们先定义一个createElement，然后打印参数，看看需要补那些参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createElement = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;createElement传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">createElement</span> = createElement;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/wi2tji.png" alt="image-20231028174951903"></p><p>是不是很明显了，传入了div,那我们就要模拟出来一个在传入div时候的返回值</p><p>然后注意到缺失了getElementsByTagName</p><p>我来说下怎么回事：</p><p>正常流程是：createElement会创建一个div对象，然后div对象又执行了它的getElementsByTagName函数</p><p>现在是：createElement什么都没返回，默认返回了undefind，就导致拿不到getElementsByTagName这个函数了</p><p>我们可以这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div  = &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createElement = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;createElement传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;div&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> div</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，我们把div加入监控数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中放入需要代理的对象</span></span><br><span class="line"><span class="keyword">var</span> proxy_array = [</span><br><span class="line">  <span class="string">&quot;document&quot;</span>,</span><br><span class="line">  <span class="string">&quot;navigator&quot;</span>,</span><br><span class="line">  <span class="string">&quot;location&quot;</span>,</span><br><span class="line">  <span class="string">&quot;div&quot;</span></span><br><span class="line">];</span><br><span class="line"><span class="title function_">proxy</span>(proxy_array);</span><br></pre></td></tr></table></figure><p>再次执行</p><p><img src="https://p.ipic.vip/70j6b0.png" alt="image-20231028175346688"></p><p>对吧，让我们直接补一个getElementsByTagName，再让它是div的一个属性即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getElementsByTagName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getElementsByTagName传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">div.<span class="property">getElementsByTagName</span> = getElementsByTagName;</span><br></pre></td></tr></table></figure><p>再次执行</p><p><img src="https://p.ipic.vip/pxtkm3.png" alt="image-20231028175456199"></p><p>我们可以看到getElementsByTagName原本是传入了一个i参数，然后返回了一个<strong>列表</strong>对象（getElementsByTagName，注意带s，返回的是列表）</p><p>后续在取对象第0个元素时候，取不到，于是就报了这个reading ‘0’的错误~</p><p>很简单，我们直接补一个返回值即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getElementsByTagName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getElementsByTagName传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那，我们应该怎么补返回值呢，列表里到底要写什么，这个暂时不清楚。</p><p>遇到这种情况，我们可以写一份hook代码，看看浏览器的真实环境是怎么执行的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 保存原始的getElementsByTagName函数</span></span><br><span class="line"><span class="keyword">const</span> originalGetElementsByTagName = <span class="variable language_">document</span>.<span class="property">getElementsByTagName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的钩子函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">getElementsByTagName</span> = <span class="keyword">function</span>(<span class="params">tagName</span>) &#123;</span><br><span class="line">  <span class="comment">// 打印入参</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用原始的getElementsByTagName函数获取元素</span></span><br><span class="line">  <span class="keyword">const</span> elements = originalGetElementsByTagName.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结束打印</span></span><br><span class="line"><span class="keyword">if</span> (tagName==<span class="string">&#x27;i&#x27;</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用getElementsByTagName，参数:&#x27;</span>, tagName);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取的元素:&#x27;</span>, elements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回获取的元素</span></span><br><span class="line">  <span class="keyword">return</span> elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="keyword">const</span> divElements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/onq68j.png" alt="image-20231028175833829"></p><p>这个hook代码到后面还有用，我们后面要常用的</p><p>那么刷新浏览器之后什么都没输出，那么我们直接让它返回[]就好了，然后继续下一步</p><p><img src="https://p.ipic.vip/td1snu.png" alt="image-20231028180027781"></p><p>前面说过了，直接补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">addEventListener</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.addEventListener---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">attachEvent</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.attachEvent---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/ofk6im.png" alt="image-20231028180139135">直接补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">getElementsByTagName</span> = getElementsByTagName;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/we92bc.png" alt="image-20231028180224260"></p><p>这里的meta，参照div的补法即可</p><p><img src="https://p.ipic.vip/2gixj5.png" alt="image-20231028180337701"></p><p>补content,parentNode即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> meta = &#123;</span><br><span class="line">    <span class="attr">content</span>:content,</span><br><span class="line"></span><br><span class="line">    <span class="attr">parentNode</span>:parentNode</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/1rykb0.png" alt="image-20231028180509248">这里看到对parentNode取了什么值，我们调试看一下是什么，这里的debugger打开</p><p><img src="https://p.ipic.vip/iny5hd.png" alt="image-20231028180631386"></p><p><img src="https://p.ipic.vip/vtjbvz.png" alt="image-20231028180658266"></p><p><img src="https://p.ipic.vip/ajbd8x.png" alt="image-20231028180712084"></p><p>很明显，我们补一个removeChild即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parentNode = &#123;</span><br><span class="line">    <span class="attr">removeChild</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removeChild传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/ayq4hw.png" alt="image-20231028180851008"></p><p>直接补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">addEventListener</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;document.addEventListener---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">attachEvent</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;document.attachEvent---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>= &#123;&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/6pcj0l.png" alt="image-20231028181016273"></p><p>按照之前的方式补</p><p><img src="https://p.ipic.vip/kwjw2q.png" alt="image-20231028181112258"></p><p>直接补</p><p><img src="https://p.ipic.vip/g2yedd.png" alt="image-20231028181221768"></p><p>先看第一个： base的href属性到底是什么，这里我们浏览器hook调试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 保存原始的getElementsByTagName函数</span></span><br><span class="line"><span class="keyword">const</span> originalGetElementsByTagName = <span class="variable language_">document</span>.<span class="property">getElementsByTagName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的钩子函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">getElementsByTagName</span> = <span class="keyword">function</span>(<span class="params">tagName</span>) &#123;</span><br><span class="line">  <span class="comment">// 打印入参</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用原始的getElementsByTagName函数获取元素</span></span><br><span class="line">  <span class="keyword">const</span> elements = originalGetElementsByTagName.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结束打印</span></span><br><span class="line"><span class="keyword">if</span> (tagName==<span class="string">&#x27;base&#x27;</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用getElementsByTagName，参数:&#x27;</span>, tagName);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取的元素:&#x27;</span>, elements[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回获取的元素</span></span><br><span class="line">  <span class="keyword">return</span> elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="keyword">const</span> divElements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/66fcaa.png" alt="image-20231028181340445">找不到，那就不补了</p><p>补第二个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getElementById= <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getElementById传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">getElementById</span> = getElementById;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补第三个</p><p><img src="https://p.ipic.vip/16pow8.png" alt="image-20231028181541900"></p><p>直接补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = &#123;</span><br><span class="line">    <span class="attr">getAttribute</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getAttribute传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出值了</p><p><img src="https://p.ipic.vip/k4xtsx.png" alt="image-20231028181647292"></p><p>中间其实也有一些undefind的，比如</p><p><img src="https://p.ipic.vip/i1llqg.png" alt="image-20231028181737981"></p><p>我们hook一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 保存原始的getElementsByTagName函数</span></span><br><span class="line"><span class="keyword">const</span> originalGetElementsByTagName = <span class="variable language_">document</span>.<span class="property">getElementsByTagName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的钩子函数</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">getElementsByTagName</span> = <span class="keyword">function</span>(<span class="params">tagName</span>) &#123;</span><br><span class="line">  <span class="comment">// 打印入参</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用原始的getElementsByTagName函数获取元素</span></span><br><span class="line">  <span class="keyword">const</span> elements = originalGetElementsByTagName.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结束打印</span></span><br><span class="line"><span class="keyword">if</span> (tagName==<span class="string">&#x27;script&#x27;</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用getElementsByTagName，参数:&#x27;</span>, tagName);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取的元素:&#x27;</span>, elements[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;r&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回获取的元素</span></span><br><span class="line">  <span class="keyword">return</span> elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例用法</span></span><br><span class="line"><span class="keyword">const</span> divElements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/dtrfw7.png" alt="image-20231028181825743"></p><p>直接补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = &#123;</span><br><span class="line">    <span class="attr">getAttribute</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getAttribute传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;m&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/s3l2s8.png" alt="image-20231028181929675"></p><p>直接补</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = &#123;</span><br><span class="line">    <span class="attr">getAttribute</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getAttribute传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">switch</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;m&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parentElement</span>:&#123;</span><br><span class="line">        <span class="attr">removeChild</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;removeChild传入参数---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/3mrh0h.png" alt="image-20231028182010411"></p><p>再次出值</p><p>我们拿着环境测试一下</p><p><img src="https://p.ipic.vip/absj00.png" alt="image-20231028182147320">很不幸，还是400</p><p>这时候我们回头把window那些空的属性再过一遍就好了，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">globalStorage</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">indexedDB</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">mozIndexedDB</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">webkitIndexedDB</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">msIndexedDB</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">PointerEvent</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.PointerEvent---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">jesion</span> = &#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">chrome</span> = &#123;</span><br><span class="line">  <span class="string">&quot;app&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;isInstalled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;InstallState&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;DISABLED&quot;</span>: <span class="string">&quot;disabled&quot;</span>,</span><br><span class="line">          <span class="string">&quot;INSTALLED&quot;</span>: <span class="string">&quot;installed&quot;</span>,</span><br><span class="line">          <span class="string">&quot;NOT_INSTALLED&quot;</span>: <span class="string">&quot;not_installed&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;RunningState&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;CANNOT_RUN&quot;</span>: <span class="string">&quot;cannot_run&quot;</span>,</span><br><span class="line">          <span class="string">&quot;READY_TO_RUN&quot;</span>: <span class="string">&quot;ready_to_run&quot;</span>,</span><br><span class="line">          <span class="string">&quot;RUNNING&quot;</span>: <span class="string">&quot;running&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Gamepad</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.Gamepad---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">webkitRequestFileSystem</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.webkitRequestFileSystem---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">openDatabase</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window.openDatabase---&gt;&#x27;</span>,<span class="variable language_">arguments</span>);&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/rv473o.png" alt="image-20231028182314986"></p><p>第二次返回200，成功~</p><p>至此，Rs5补环境结束</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>Rs6补环境和Rs vmp补环境就不会再说这么多细节了，会侧重一些特殊的环境检测。</p><p>未经允许禁止转载哦   </p><p>作者：Nohup</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;提前说一句： 所有版本均可rpc通杀，一键注入、高并发采集；但是吃机器性能、不太方便，不过是一个很好的临时方案。&lt;/p&gt;
&lt;p&gt;这里主要说明补环境方案&lt;/p&gt;
&lt;h2 id=&quot;Rs5&quot;&gt;&lt;a href=&quot;#Rs5&quot; class=&quot;headerlink&quot; title=&quot;Rs5</summary>
      
    
    
    
    <category term="js逆向 逆向" scheme="http://qwd.ai/categories/js%E9%80%86%E5%90%91-%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>瑞数安全（4、5、6、vmp版本）方案(1)</title>
    <link href="http://qwd.ai/2023/10/24/%E7%91%9E%E6%95%B0%E5%AE%89%E5%85%A8%EF%BC%884%E3%80%815%E3%80%816%E3%80%81vmp%E7%89%88%E6%9C%AC%EF%BC%89%E6%96%B9%E6%A1%88-1/"/>
    <id>http://qwd.ai/2023/10/24/%E7%91%9E%E6%95%B0%E5%AE%89%E5%85%A8%EF%BC%884%E3%80%815%E3%80%816%E3%80%81vmp%E7%89%88%E6%9C%AC%EF%BC%89%E6%96%B9%E6%A1%88-1/</id>
    <published>2023-10-24T09:54:40.000Z</published>
    <updated>2023-10-24T09:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>提前说一句： 所有版本均可rpc通杀，一键注入、高并发采集；但是吃机器性能、不太方便，不过是一个很好的临时方案。</p><p>这里主要说明补环境方案</p><h2 id="Rs4"><a href="#Rs4" class="headerlink" title="Rs4"></a>Rs4</h2><p>网址： aHR0cDovL3d3dy5mYW5nZGkuY29tLmNuL25ld19ob3VzZS9uZXdfaG91c2UuaHRtbA&#x3D;&#x3D;</p><h3 id="Rs4分析"><a href="#Rs4分析" class="headerlink" title="Rs4分析"></a>Rs4分析</h3><p>瑞数的两个cookie标志：<br>FSSBBIl1UgzbN7N80T: 4.W3r2VRGFyg31RdmB8.t.StPEOTYFfahgM9RJdr8ncd_n8I3h0SFVHCTuU8Kjh2bWSRL.kNdSEAfq5Fz4iGP_A.OmJKoAfdtuEH1eWbuvptiv_s9eIgWB7fYUrxOlJHeME4nO8aX3GCXxt8pSV7.hXYWdqB_hstgMtq3YynZSxnK0IWJk9Kh1F.28lFRS3HnscVuJE3Waa48AfP4bhDLblMunctN4n.L_1e33dmux7AVWsjjHEZb7eDVQXSjvEGi8htWecaSdtXaeNW8sDM5WHeF0vVqTX7zyuekRvvF8GHk6WZmcuxM0e4wEevxLjoZYhQomRSkYI.Z6o6PQVJkHQWTD1JL_CsLq8YS7gi2fSeCEE2cJRCfBxPhxVsVJBhm1j3</p><ul><li>80T代表 http<ul><li>值以 4 开头，表示瑞数四代<ul><li>httponly: false<br>FSSBBIl1UgzbN7N80S: t41Jq5g8fMaZVHDOe7BnmrInFJhrLmgpnofodLpZqLcPXDRTyd4.GP7OwPFCU012</li><li>80s代表 https</li><li>httponly: true，属于后台返回的</li></ul></li></ul></li></ul><p>请求分析</p><ul><li>初次请求，没有cookie时，会返回一个 202 的页面 （可清除cookie后测试）<ul><li>我们的cookie就是通过该 202页面js, meta中的content  和 一个ts代码文件 共同生成的<ul><li>ts 代码无法看懂，202页面 自执行js 会解析 ts 为正常js代码</li><li>自执行函数有一个call方法，通过eval方法 将ts解析后的 js 代码放到VM中运行，<ul><li>通过调试可以看到 对应的js代码</li></ul></li></ul></li></ul></li><li>再次请求，返回 200 页面</li></ul><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><p>Js代码大概可以分为这几个部分：</p><p><img src="https://p.ipic.vip/4iwsfq.png" alt="image-20231024162932444"></p><p>从上到下依次是：</p><ul><li>自己补的环境 windows、documents这类的</li><li>初次请求返回的content</li><li>ts文件内容(初次请求返回的有js文件地址)</li><li>初次返回的自执行函数</li><li>导出cookie函数</li></ul><p>2、3、4部分我们均可以在第一次请求中拿到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Proxy-Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.fangdi.com.cn/new_house/new_house.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = session.get(</span><br><span class="line">    <span class="string">&#x27;http://www.fangdi.com.cn/new_house/new_house.html&#x27;</span>,</span><br><span class="line">    cookies=cookies,</span><br><span class="line">    headers=headers,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;固定.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.text)</span><br><span class="line"><span class="comment"># 匹配出content</span></span><br><span class="line">content = re.findall(<span class="string">&#x27;&lt;meta content=&quot;(.*?)&quot;&#x27;</span>, response.text)[<span class="number">0</span>] <span class="comment"># content</span></span><br><span class="line">auto_js = re.findall(<span class="string">&#x27;&lt;script type=&quot;text/javascript&quot; r=&quot;m&quot;&gt;(.*?)&lt;/script&gt;&#x27;</span>, response.text,re.S|re.I)[<span class="number">0</span>] <span class="comment"># 自执行函数</span></span><br><span class="line">ts_url = re.findall(<span class="string">&#x27;src=&quot;(.*?js)&quot; r=&#x27;</span>,response.text,re.S|re.I)[<span class="number">0</span>] <span class="comment"># js文件</span></span><br><span class="line">ts_url = <span class="string">f&#x27;http://www.fangdi.com.cn<span class="subst">&#123;ts_url&#125;</span>&#x27;</span></span><br><span class="line">logger.debug(<span class="string">f&#x27;ts_url:<span class="subst">&#123;ts_url&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><p>我们先把最基本的一些环境补充好，我们的环境放在最顶部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">null_func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空函数参数:&quot;</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="variable language_">window</span> = <span class="variable language_">global</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">top</span> = <span class="variable language_">window</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">self</span> = <span class="variable language_">window</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">TEMPORARY</span> = <span class="number">0</span>;</span><br><span class="line">location = &#123;</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;http://www.fangdi.com.cn/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&quot;http:&quot;</span>,</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&#x27;http://www.fangdi.com.cn&#x27;</span>,</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;www.fangdi.com.cn&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span> = &#123;</span><br><span class="line">    <span class="attr">charset</span>: <span class="string">&#x27;UTF-8&#x27;</span>,</span><br><span class="line">    <span class="attr">characterSet</span>: <span class="string">&#x27;UTF-8&#x27;</span>,</span><br><span class="line">    <span class="attr">cookie</span>: <span class="string">&#x27;xxxxxx; xxxx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">navigator = &#123;</span><br><span class="line">    <span class="attr">userAgent</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="attr">webdriver</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">languages</span>: [<span class="string">&#x27;zh-CN&#x27;</span>, <span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;en&#x27;</span>],</span><br><span class="line">    <span class="attr">appVersion</span>: <span class="string">&#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="attr">webkitPersistentStorage</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">history = &#123;&#125;;</span><br><span class="line">null_func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空参:&quot;</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>紧接着，我们把代理写到我们环境的下方</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">window</span>, &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, value, receiver</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;设置属性set window&quot;</span>, property, <span class="keyword">typeof</span> value);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property, receiver</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取属性get window&quot;</span>, property, <span class="keyword">typeof</span> target[property]);</span><br><span class="line">        <span class="keyword">return</span> target[property]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">proxy</span> (proxy_array) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;proxy_array.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">eval</span>(proxy_array[i] + <span class="string">`= new Proxy(`</span> + proxy_array[i] + <span class="string">`, &#123;</span></span><br><span class="line"><span class="string">            get(target, key) &#123;</span></span><br><span class="line"><span class="string">              if(key == &#x27;你需要debugger的属性&#x27;)&#123;</span></span><br><span class="line"><span class="string">                debugger;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">              console.log(&#x27;----------------------&#x27;)</span></span><br><span class="line"><span class="string">              // console.log( &#x27;【`</span> + proxy_array[i]+ <span class="string">`】取属性 &#x27; + key + &#x27;, 详细位置debugger查看&#x27;);</span></span><br><span class="line"><span class="string">              // target[key] 为某些对象时, 拼接字符串会异常，如 window[&#x27;document&#x27;]</span></span><br><span class="line"><span class="string">              console.log( &#x27;【`</span> + proxy_array[i]+ <span class="string">`】取属性 &#x27; + key + &#x27; 值: &#x27; + target[key] + &#x27;, 详细位置debugger查看&#x27;);</span></span><br><span class="line"><span class="string">              console.log(&#x27;----------------------&#x27;)</span></span><br><span class="line"><span class="string">              return target[key];</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;);`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数组中放入需要代理的对象</span></span><br><span class="line"><span class="keyword">var</span> proxy_array = [<span class="string">&#x27;document&#x27;</span>, <span class="string">&#x27;navigator&#x27;</span>,<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;history&#x27;</span>];</span><br><span class="line"><span class="title function_">proxy</span>(proxy_array);</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/7cxhn4.png" alt="image-20231024164831290"></p><p>缺啥补啥，先去浏览器看看这个东西是什么然后直接补，如果浏览器也显示找不到，那就不用管。</p><p>我们注意到document缺了<code>createElement</code></p><p>先补一个这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createElement = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">createElement</span> = createElement;</span><br></pre></td></tr></table></figure><p>然后它报错</p><p><img src="https://p.ipic.vip/ttangj.png" alt="image-20231024165219319"></p><p>我们直接调试</p><p><img src="https://p.ipic.vip/s3mo7d.png" alt="image-20231024170010871"></p><p>这里改为上一个出现的属性即可</p><p>比如createElement之后报错了，我们就改为createElement，便于快速定位</p><p><img src="https://p.ipic.vip/llhdvm.png" alt="image-20231024170151898"></p><p>进入debugger后一路单步往下走</p><p>吐槽一下pycharm： 进入到虚拟机之后就无法定位到代码在哪了，还得自己找，现在临时换到vscode进行调试</p><p><img src="https://p.ipic.vip/dii9ie.png" alt="image-20231024171046462"></p><p>这里也是成功进入，这里看到_$jb是一个{}, {} 当然没有<code>getElementsByTagName</code>属性了，所以我猜测是我们createElement之后的对象，缺少了这个属性</p><p><img src="https://p.ipic.vip/sbw8ye.png" alt="image-20231024171121418"></p><p>所以我们这里改一下hook代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createElement = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建对象：&#x27;</span>,<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再次执行</p><p><img src="https://p.ipic.vip/a0hd9i.png" alt="image-20231024171412775">w</p><p>所以这里是要创建一个div</p><p>我们提前定义div，然后给它加到代理器，验证下我的猜想</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div = &#123;&#125;</span><br><span class="line">createElement = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建对象：&#x27;</span>,<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">arguments</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;div&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> div;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy_array = [<span class="string">&#x27;document&#x27;</span>, <span class="string">&#x27;navigator&#x27;</span>,<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;history&#x27;</span>,<span class="string">&#x27;div&#x27;</span>];</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/7a36r0.png" alt="image-20231024171603306"></p><p>果然是这样！那我就需要针对div补一个getElementsByTagName属性即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getElementsByTagName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取元素：&#x27;</span>,<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">div.<span class="property">getElementsByTagName</span> = getElementsByTagName;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/smpa09.png" alt="image-20231024171814966"></p><p>这里我们调试出了获取了元素i，所以我们就直接补i，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getElementsByTagName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取元素：&#x27;</span>,<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">arguments</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后也补一下<code>addEventListener</code>、<code>attachEvent</code></p><p>这里我们一律补成null_func，假如有传参的话，它会自动输出，我们再针对性的补（参考刚才的获取i元素）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">addEventListener</span> = null_func</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">attachEvent</span> = null_func</span><br></pre></td></tr></table></figure><p>继续执行，再次报错</p><p><img src="https://p.ipic.vip/a62k8r.png" alt="image-20231024172219167"></p><p>这里我们先补一下document的相关属性</p><p>其实一些基本的都可以先提前写入了，类似这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">location = &#123;</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;http://www.fangdi.com.cn/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&quot;http:&quot;</span>,</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&#x27;http://www.fangdi.com.cn&#x27;</span>,</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;www.fangdi.com.cn&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span> = &#123;</span><br><span class="line">    <span class="attr">charset</span>: <span class="string">&#x27;UTF-8&#x27;</span>,</span><br><span class="line">    <span class="attr">characterSet</span>: <span class="string">&#x27;UTF-8&#x27;</span>,</span><br><span class="line">    <span class="attr">cookie</span>: <span class="string">&#x27;xxxxxx; xxxx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">connection = &#123;&#125;;</span><br><span class="line">navigator = &#123;</span><br><span class="line">    <span class="attr">userAgent</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="attr">webdriver</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">languages</span>: [<span class="string">&#x27;zh-CN&#x27;</span>, <span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;en&#x27;</span>],</span><br><span class="line">    <span class="attr">appVersion</span>: <span class="string">&#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="attr">webkitPersistentStorage</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们看那个报错，再补一下document.getElementsByTagName</p><p><img src="https://p.ipic.vip/x4e8uw.png" alt="image-20231024172457368"></p><p>我们吸取上次记得经验，先不急着补Meta，看看它是不是对meta也做了什么手脚，所以开始调试</p><p><img src="https://p.ipic.vip/ffxjvi.png" alt="image-20231024172926210"></p><p>意思就是，它会读取getElementsByTagName返回对象的_$tp[68]属性和_$tp[42]属性，也就是content和removeChild</p><p>那这就好办了,这样补就行（注意getElementsByTagName返回的是一个列表，所以我们也要返回列表哦）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getElementsByTagName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取元素：&#x27;</span>,<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">arguments</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;meta&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">content</span>:content,</span><br><span class="line">                    <span class="attr">parentNode</span>:&#123;</span><br><span class="line">                        <span class="attr">removeChild</span>:null_func</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续执行</p><p><img src="https://p.ipic.vip/kq8ecp.png" alt="image-20231024173242596"></p><p>直接补null_func即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">addEventListener</span> = null_func;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">attachEvent</span> = null_func;</span><br></pre></td></tr></table></figure><p>继续执行</p><p><img src="https://p.ipic.vip/igjqmj.png" alt="image-20231024174827411"></p><p>getElementsByTagName获取了script，我们再按照刚才的流程，补一个script然后把它加上代理</p><p><img src="https://p.ipic.vip/7z8i80.png" alt="image-20231024175024233"></p><p>针对性的补一个getAttribute函数即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">script = &#123;</span><br><span class="line">    <span class="attr">getAttribute</span>:null_func</span><br><span class="line">&#125;</span><br><span class="line">getElementsByTagName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取元素：&#x27;</span>,<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">arguments</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;meta&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">content</span>:content,</span><br><span class="line">                    <span class="attr">parentNode</span>:&#123;</span><br><span class="line">                        <span class="attr">removeChild</span>:null_func</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;script&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> [script]</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续执行</p><p><img src="https://p.ipic.vip/zl4l42.png" alt="image-20231024173353645"></p><p>发现一直输出这些，陷入了死循环</p><p>我们直接置空这俩函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"> <span class="built_in">setInterval</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure><p>再次执行</p><p>终于看到了想要的结果！</p><p><img src="https://p.ipic.vip/pnqn1u.png" alt="image-20231024173527300"></p><p>把抠出来的环境放到我们一开始说的env即可</p><h2 id="测试补环境成果"><a href="#测试补环境成果" class="headerlink" title="测试补环境成果"></a>测试补环境成果</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------拿到ts文件内容----------------</span></span><br><span class="line">ts = requests.get(ts_url).text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./ts.js&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(ts)</span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line">js = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    <span class="subst">&#123;env2&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var content=&quot;<span class="subst">&#123;content&#125;</span>&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // ts 文件内容</span></span><br><span class="line"><span class="string">    require(&#x27;./ts&#x27;);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    // 自执行函数</span></span><br><span class="line"><span class="string">    <span class="subst">&#123;auto_js&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function get_cookie()&#123;&#123;</span></span><br><span class="line"><span class="string">        cookie = document.cookie</span></span><br><span class="line"><span class="string">        FSSBBIl1UgzbN7N80T = cookie.split(&#x27;;&#x27;)[0].split(&#x27;=&#x27;)[1]</span></span><br><span class="line"><span class="string">        return FSSBBIl1UgzbN7N80T;</span></span><br><span class="line"><span class="string">    &#125;&#125;</span></span><br><span class="line"><span class="string">    console.log(get_cookie());</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;End.js&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(js)</span><br><span class="line">logger.debug(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二次请求</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;End.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">_80T = execjs.<span class="built_in">compile</span>(file).call(<span class="string">&#x27;get_cookie&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;www.fangdi.com_http_ic&#x27;</span>: <span class="string">&#x27;www.fangdi.com.cn_80_RS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;www.fangdi.com.cn&#x27;</span>: <span class="string">&#x27;www.fangdi.com.cn_rs1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;FSSBBIl1UgzbN7N80T&#x27;</span>: _80T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==cookie入参：&#x27;</span>, cookies)</span><br><span class="line">resp = session.get(<span class="string">&#x27;http://www.fangdi.com.cn/new_house/new_house.html&#x27;</span>, headers=headers, cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(resp.status_code)</span><br><span class="line"><span class="built_in">print</span>(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/6iia5n.png" alt="image-20231024175313053"></p><p>至此，Rs4补环境结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;提前说一句： 所有版本均可rpc通杀，一键注入、高并发采集；但是吃机器性能、不太方便，不过是一个很好的临时方案。&lt;/p&gt;
&lt;p&gt;这里主要说明补环境方案&lt;/p&gt;
&lt;h2 id=&quot;Rs4&quot;&gt;&lt;a href=&quot;#Rs4&quot; class=&quot;headerlink&quot; title=&quot;Rs4</summary>
      
    
    
    
    <category term="js逆向 逆向" scheme="http://qwd.ai/categories/js%E9%80%86%E5%90%91-%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>数美最新滑块分析</title>
    <link href="http://qwd.ai/2023/10/19/%E6%95%B0%E7%BE%8E%E6%BB%91%E5%9D%97%E5%88%86%E6%9E%90/"/>
    <id>http://qwd.ai/2023/10/19/%E6%95%B0%E7%BE%8E%E6%BB%91%E5%9D%97%E5%88%86%E6%9E%90/</id>
    <published>2023-10-19T13:47:23.000Z</published>
    <updated>2023-10-19T13:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请求参数分析"><a href="#请求参数分析" class="headerlink" title="请求参数分析"></a>请求参数分析</h2><h3 id="拿到滑块图片"><a href="#拿到滑块图片" class="headerlink" title="拿到滑块图片"></a>拿到滑块图片</h3><p>接口：<code>https://captcha1.fengkongcloud.cn/ca/v1/register?</code></p><p>参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model<span class="punctuation">:</span> slide</span><br><span class="line">lang<span class="punctuation">:</span> zh-cn</span><br><span class="line">channel<span class="punctuation">:</span> DEFAULT</span><br><span class="line">appId<span class="punctuation">:</span> default</span><br><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">organization<span class="punctuation">:</span> d6tpAY1oV0Kv5jRSgxQr</span><br><span class="line">rversion<span class="punctuation">:</span> <span class="number">1.0</span><span class="number">.4</span></span><br><span class="line">sdkver<span class="punctuation">:</span> <span class="number">1.1</span><span class="number">.3</span></span><br><span class="line">captchaUuid<span class="punctuation">:</span> <span class="number">20231018105415</span>RxPwHEF6nFydcrMkXp</span><br><span class="line">callback<span class="punctuation">:</span> sm_1697597844207</span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sm_1697597844207(<span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1100</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;requestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3c06d0c895558145092809fc53b3224f&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;riskLevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PASS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/crb/set-000006/v2/c7e8581ea957ce5b18ebdf9dc623eae4_bg.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bg_height&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bg_width&quot;</span><span class="punctuation">:</span> <span class="number">600</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domains&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;castatic.fengkongcloud.cn&quot;</span><span class="punctuation">,</span> <span class="string">&quot;castatic.fengkongcloud.com&quot;</span><span class="punctuation">,</span> <span class="string">&quot;castatic-a.fengkongcloud.com&quot;</span><span class="punctuation">,</span> <span class="string">&quot;castatic2.fengkongcloud.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/crb/set-000006/v2/c7e8581ea957ce5b18ebdf9dc623eae4_fg.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;k&quot;</span><span class="punctuation">:</span> <span class="string">&quot;w94WeW6DzZY=&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;l&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20231018105723994ca4bcdd165667e6&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure><p>经过测试<code>organization</code> 是不能忽略的，但是<code>captchaUuid</code> 可以不设置</p><p>搜索发现organization来自于请求<a href="https://www.ishumei.com/static/js/trial/captcha_7867b6f.js%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC">https://www.ishumei.com/static/js/trial/captcha_7867b6f.js的返回值</a></p><p>保险起见，我们找一下captchaUuid的来源</p><p>搜索发现在这里是拿到的CaptchaUuid</p><p><img src="/Users/zhangyubo/Library/Application%20Support/typora-user-images/image-20231018110544086.png" alt="image-20231018110544086"></p><p>混淆代码看着太麻烦了，我们先解混淆一下（字符串替换—&gt;数组替换—&gt;去控制流），然后本地替换该文件</p><p>打断点调试</p><p><img src="https://p.ipic.vip/l3ve0k.png" alt="image-20231018114302634"></p><p>我们可以把函数改一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x377dfb</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> _0xf7a45e = <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">            _0x2257b4 = <span class="keyword">function</span> <span class="title function_">_0x51d189</span>(<span class="params">_0x2bb897</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> +_0x2bb897 &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + _0x2bb897 : _0x2bb897[<span class="string">&#x27;toString&#x27;</span>]();</span><br><span class="line">            &#125;;</span><br><span class="line">          <span class="keyword">return</span> _0xf7a45e[<span class="string">&quot;getFullYear&quot;</span>]()[<span class="string">&quot;toString&quot;</span>]() + <span class="title function_">_0x2257b4</span>(_0xf7a45e[<span class="string">&#x27;getMonth&#x27;</span>]() + <span class="number">1</span>) + <span class="title function_">_0x2257b4</span>(_0xf7a45e[<span class="string">&quot;getDate&quot;</span>]()) + <span class="title function_">_0x2257b4</span>(_0xf7a45e[<span class="string">&quot;getHours&quot;</span>]()) + <span class="title function_">_0x2257b4</span>(_0xf7a45e[<span class="string">&quot;getMinutes&quot;</span>]()) + <span class="title function_">_0x2257b4</span>(_0xf7a45e[<span class="string">&quot;getSeconds&quot;</span>]());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x1b55e2</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> _0x2468bc = <span class="string">&quot;4|2|0|1|3&quot;</span>[<span class="string">&quot;split&quot;</span>](<span class="string">&#x27;|&#x27;</span>),</span><br><span class="line">            _0x22d1a6 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">var</span> _0x1c9d91 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="keyword">var</span> _0x5b1e90 = <span class="string">&quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&quot;</span>;</span><br><span class="line">          <span class="keyword">var</span> _0x3c1b53 = _0x5b1e90[<span class="string">&quot;length&quot;</span>];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> _0x41ee97 = <span class="number">0</span>; _0x41ee97 &lt; <span class="number">18</span>; _0x41ee97++) &#123;</span><br><span class="line">            _0x1c9d91 += _0x5b1e90[<span class="string">&quot;charAt&quot;</span>](<span class="title class_">Math</span>[<span class="string">&quot;floor&quot;</span>](<span class="title class_">Math</span>[<span class="string">&quot;random&quot;</span>]() * _0x3c1b53));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">_0x377dfb</span>() + _0x1c9d91;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/vtmyya.png" alt="image-20231018114432949"></p><p>然后直接执行_0x1b55e2()就能得到一个CaptchaUuid了</p><p>这样我们就能得到一个滑块了。</p><h3 id="校验参数分析"><a href="#校验参数分析" class="headerlink" title="校验参数分析"></a>校验参数分析</h3><p>接口<code>https://captcha1.fengkongcloud.cn/ca/v2/fverify</code></p><p>参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jn<span class="punctuation">:</span> w6ook9DZFNo=</span><br><span class="line">act.os<span class="punctuation">:</span> web_pc</span><br><span class="line">captchaUuid<span class="punctuation">:</span> <span class="number">20231018114334</span>JRrwA5NQjS7TXWEhkQ</span><br><span class="line">qu<span class="punctuation">:</span> Q/IW6xhk8TI=</span><br><span class="line">ra<span class="punctuation">:</span> <span class="number">45</span>xO9mJgzm0=</span><br><span class="line">organization<span class="punctuation">:</span> d6tpAY1oV0Kv5jRSgxQr</span><br><span class="line">rid<span class="punctuation">:</span> <span class="number">202310181143409</span>ba3155bef7381f25a</span><br><span class="line">us<span class="punctuation">:</span> zY8brT9SISY=</span><br><span class="line">ee<span class="punctuation">:</span> <span class="number">4</span>npBSAu34PH3ZHg0mS4Tikw5sA5JGQ92EwGQZWBmBLkQe99zAf5LX89047T2JGRsffdD2yOq4GwGbvEv/+lR6i9nx97W85Lj2FFg8n/ThUN0auGouDcVAg==</span><br><span class="line">xy<span class="punctuation">:</span> xIAv2QAUoJA=</span><br><span class="line">jv<span class="punctuation">:</span> tnws0FUkt6c=</span><br><span class="line">sdkver<span class="punctuation">:</span> <span class="number">1.1</span><span class="number">.3</span></span><br><span class="line">ma<span class="punctuation">:</span> Ku1yrQmmWo8=</span><br><span class="line">protocol<span class="punctuation">:</span> <span class="number">179</span></span><br><span class="line">rversion<span class="punctuation">:</span> <span class="number">1.0</span><span class="number">.4</span></span><br><span class="line">xc<span class="punctuation">:</span> MPQBHp3MK74=</span><br><span class="line">callback<span class="punctuation">:</span> sm_1697600768421</span><br><span class="line">rj<span class="punctuation">:</span> LpMN9yrHH3I=</span><br><span class="line">ml<span class="punctuation">:</span> <span class="number">1</span>lymMSNqdDgh5oekvc4+<span class="number">3</span>FBT7V3GKiK7</span><br><span class="line">hd<span class="punctuation">:</span> w6ArMUdGI6s=</span><br><span class="line">ostype<span class="punctuation">:</span> web</span><br></pre></td></tr></table></figure><p>我们逐个分析</p><p>首先直接搜参数名字，我们定位到了js</p><p><img src="https://p.ipic.vip/boye70.png" alt="image-20231018114909250"></p><p>也是一个混淆后的js，那就还先解混淆替换一下,解混淆放到别的文章说</p><p>一下是解混淆之后的代码</p><p><img src="https://p.ipic.vip/4dhabv.png" alt="image-20231019092538713"></p><h4 id="getEncryptContent"><a href="#getEncryptContent" class="headerlink" title="getEncryptContent"></a>getEncryptContent</h4><p>我们直接把this[“getEncryptContent”]扣出来看看是个什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">_0x4db346[<span class="string">&quot;prototype&quot;</span>][<span class="string">&quot;getEncryptContent&quot;</span>] = <span class="keyword">function</span> <span class="title function_">_0x51d516</span>(<span class="params">_0x21ff8d, _0x18574e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0x14d7af = <span class="string">&quot;3|8|4|0|5|1|6|7|2&quot;</span>[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">      , _0x1df0e0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (_0x14d7af[_0x1df0e0++]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="keyword">var</span> _0x854c56 = <span class="keyword">typeof</span> _0x21ff8d === <span class="string">&quot;string&quot;</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="keyword">var</span> _0x3ba722 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> _0x3ba722;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            <span class="keyword">var</span> _0x58c8b7 = <span class="variable language_">this</span>[<span class="string">&#x27;_data&#x27;</span>][<span class="string">&quot;__key&quot;</span>];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            _0x4d5773[<span class="string">&#x27;default&#x27;</span>][<span class="string">&quot;isJsFormat&quot;</span>]() &amp;&amp; (_0x3296bb = _0x2f8e69);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">            <span class="keyword">var</span> _0x48bcbb = _0x854c56 ? _0x21ff8d : _0x4d5773[<span class="string">&#x27;default&#x27;</span>][<span class="string">&quot;smStringify&quot;</span>](_0x21ff8d);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">            _0x3ba722 = _0x5c06a2[<span class="string">&#x27;default&#x27;</span>][<span class="string">&quot;DES&quot;</span>](_0x3296bb, _0x48bcbb, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">            _0x3ba722 = _0x5c06a2[<span class="string">&#x27;default&#x27;</span>][<span class="string">&quot;base64Encode&quot;</span>](_0x3ba722);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">            <span class="keyword">var</span> _0x3296bb = _0x18574e || _0x58c8b7;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是一个DES加密，我们改写一下即可</p><p>先定位到<code>_0x4d5773</code>和<code>_0x5c06a2</code>是个什么东西，因为看到调用了它们的一些函数</p><p><code> _0x4d5773[&#39;default&#39;][&quot;isJsFormat&quot;]()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;isJsFormat&#x27;</span>: <span class="keyword">function</span> <span class="title function_">_0x3f98b1</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> _0x7052eb[<span class="string">&#x27;toString&#x27;</span>]()[<span class="string">&quot;split&quot;</span>](<span class="string">&quot;\n&quot;</span>)[<span class="string">&quot;length&quot;</span>] &gt; <span class="number">2</span>;</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/95wuyp.png" alt="image-20231019095711053"></p><p>这个返回值调试得出结果固定为true</p><p><code>_0x4d5773[&#39;default&#39;][&quot;smStringify&quot;]</code></p><p><img src="https://p.ipic.vip/5bd3of.png" alt="image-20231019095232450"></p><p>其实就是<strong>JSON.stringify</strong></p><p><code>this[&#39;_data&#39;][&quot;__key&quot;]</code></p><p>然后我们看__key是怎么来的</p><p><img src="https://p.ipic.vip/jzxloq.png" alt="image-20231019100251375"></p><p>其实就是<code>_0x5c06a2[&#39;default&#39;][&#39;DES&#39;](_0x11a125, _0x324a10, 0, 0)[&quot;substr&quot;](0, _0x27ee4e)</code></p><p>DES加密之后截取了8个字符长度</p><p>可以看到传入的参数是</p><p><img src="https://p.ipic.vip/br9vn9.png" alt="image-20231019100427795"></p><p>我们直接把他们自写的一个DES加密扣出来</p><p><img src="https://p.ipic.vip/fw9fpd.png" alt="image-20231019100809086"></p><p><img src="https://p.ipic.vip/zuwdmt.png" alt="image-20231019101030105"></p><p>结果完全一致</p><p>那么__key我们也搞定了,顺带把DES和base64Decode也扣了出来</p><p>至此getEncryptContent搞定</p><h2 id="轨迹数组"><a href="#轨迹数组" class="headerlink" title="轨迹数组"></a>轨迹数组</h2><p>也就是这堆东西</p><p><img src="https://p.ipic.vip/ezc27k.png" alt="image-20231019101757521"></p><p>其中startTime，endTime很好理解，就是滑块开始和结束的时间戳</p><p>mouseEndX就是滑动的距离</p><p>trueWidth，trueHeight，blockWidth均是固定值</p><p>_0x4b9967也是固定值web_pc</p><p>我们主要来看<strong>mouseData</strong></p><p><img src="https://p.ipic.vip/mo6myk.png" alt="image-20231019102232826"></p><p>定位到这里的代码块，我们让gpt解读一下它是怎么搜集滑块轨迹的吧~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">这段代码是一个JavaScript函数，用于收集滑块轨迹数据。下面是逐行解读该函数的逻辑：</span><br><span class="line"></span><br><span class="line">var _0x97c351 = this[&#x27;_data&#x27;]：将this[&#x27;_data&#x27;]赋值给变量_0x97c351，this表示函数所属的对象。</span><br><span class="line"></span><br><span class="line">var _0x578ed3 = _0x97c351[&quot;startTime&quot;]：将_0x97c351[&quot;startTime&quot;]赋值给变量_0x578ed3。这里假设_0x97c351是一个对象，包含了一个名为startTime的属性。</span><br><span class="line"></span><br><span class="line">_0x9edfdf = _0x578ed3 === undefined ? +new Date() : _0x578ed3：如果_0x578ed3是undefined，则将+new Date()的结果赋值给_0x9edfdf，否则将_0x578ed3的值赋值给_0x9edfdf。这里使用了条件运算符（三元运算符）。</span><br><span class="line"></span><br><span class="line">var _0x1dbee8 = _0x97c351[&quot;mouseMoveX&quot;]：将_0x97c351[&quot;mouseMoveX&quot;]赋值给变量_0x1dbee8。假设_0x97c351是一个对象，包含了一个名为mouseMoveX的属性。</span><br><span class="line"></span><br><span class="line">var _0x17400c = _0x1dbee8 === undefined ? 0 : _0x1dbee8：如果_0x1dbee8是undefined，则将0赋值给_0x17400c，否则将_0x1dbee8的值赋值给_0x17400c。</span><br><span class="line"></span><br><span class="line">var _0x41556e = _0x97c351[&quot;mouseMoveY&quot;]：将_0x97c351[&quot;mouseMoveY&quot;]赋值给变量_0x41556e。假设_0x97c351是一个对象，包含了一个名为mouseMoveY的属性。</span><br><span class="line"></span><br><span class="line">var _0x23762d = _0x41556e === undefined ? 0 : _0x41556e：如果_0x41556e是undefined，则将0赋值给_0x23762d，否则将_0x41556e的值赋值给_0x23762d。</span><br><span class="line"></span><br><span class="line">var _0x46405e = _0x97c351[&quot;mouseData&quot;]：将_0x97c351[&quot;mouseData&quot;]赋值给变量_0x46405e。假设_0x97c351是一个对象，包含了一个名为mouseData的属性。</span><br><span class="line"></span><br><span class="line">var _0x5df8e6 = _0x46405e === undefined ? [] : _0x46405e：如果_0x46405e是undefined，则将一个空数组赋值给_0x5df8e6，否则将_0x46405e的值赋值给_0x5df8e6。</span><br><span class="line"></span><br><span class="line">var _0x1ffa1d = _0x97c351[&quot;intervalTimer&quot;]：将_0x97c351[&quot;intervalTimer&quot;]赋值给变量_0x1ffa1d。假设_0x97c351是一个对象，包含了一个名为intervalTimer的属性。</span><br><span class="line"></span><br><span class="line">var _0x2b531f = +new Date()：将+new Date()的结果赋值给变量_0x2b531f，表示当前时间的时间戳。</span><br><span class="line"></span><br><span class="line">_0x5df8e6[&quot;length&quot;] &lt;= 100：检查数组_0x5df8e6的长度是否小于等于100。</span><br><span class="line"></span><br><span class="line">(_0x5df8e6[&quot;push&quot;]([_0x17400c, _0x23762d, _0x2b531f - _0x9edfdf]), this[&quot;_data&quot;][&quot;mouseData&quot;] = _0x5df8e6)：如果数组_0x5df8e6的长度小于等于100，则将一个包含_0x17400c、_0x23762d和_0x2b531f - _0x9edfdf的数组添加到_0x5df8e6中，并将_0x5df8e6赋值给this[&quot;_data&quot;][&quot;mouseData&quot;]。</span><br><span class="line"></span><br><span class="line">clearInterval(_0x1ffa1d)：如果数组_0x5df8e6的长度大于100，则清除定时器_0x1ffa1d。</span><br><span class="line"></span><br><span class="line">this[&quot;_data&quot;][&quot;intervalTimer&quot;] = 0：将this[&quot;_data&quot;][&quot;intervalTimer&quot;]的值设置为0。</span><br><span class="line"></span><br><span class="line">总体来说，这段代码的逻辑是检查滑块轨迹数据的长度，如果小于等于100，则将新的数据添加到数组中；如果大于100，则停止收集数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">根据代码的命名和上下文推测，各个字段的意思可能如下：</span><br><span class="line"></span><br><span class="line">_data: 一个包含数据的对象，可能是函数所属对象的属性之一。</span><br><span class="line">startTime: 表示开始时间的字段，用于记录滑块轨迹数据的起始时间。</span><br><span class="line">mouseMoveX: 表示鼠标在水平方向上的移动距离的字段。</span><br><span class="line">mouseMoveY: 表示鼠标在垂直方向上的移动距离的字段。</span><br><span class="line">mouseData: 一个数组，用于存储滑块轨迹数据的集合。</span><br><span class="line">intervalTimer: 表示定时器的字段，可能用于控制滑块轨迹数据的收集间隔时间。</span><br><span class="line">请注意，这些字段的具体含义可能需要根据代码的上下文和使用方式进行确认。如果这段代码是从一个更大的代码块中提取出来的，可能还需要查看其他部分的代码才能完全理解这些字段的作用和含义。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">根据代码中的赋值语句，可以推测以下内容：</span><br><span class="line"></span><br><span class="line">_0x17400c: 表示鼠标在水平方向上的移动距离。根据代码的逻辑，如果_0x1dbee8（即_0x97c351[&quot;mouseMoveX&quot;]）是undefined，则将0赋值给_0x17400c，否则将_0x1dbee8的值赋值给_0x17400c。</span><br><span class="line">_0x23762d: 表示鼠标在垂直方向上的移动距离。根据代码的逻辑，如果_0x41556e（即_0x97c351[&quot;mouseMoveY&quot;]）是undefined，则将0赋值给_0x23762d，否则将_0x41556e的值赋值给_0x23762d。</span><br><span class="line">_0x2b531f - _0x9edfdf: 表示时间差，即当前时间戳减去起始时间戳。根据代码的逻辑，_0x2b531f表示当前时间的时间戳，_0x9edfdf表示起始时间的时间戳。这个表达式计算的结果是鼠标移动的时间间隔。</span><br><span class="line">请注意，由于这些变量名是经过压缩或混淆的，无法准确确定其具体含义。因此，以上推测是根据代码的上下文和常见的命名习惯进行的推测，具体含义可能需要根据代码的其他部分或上下文进行确认。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结来说就是搜集鼠标在运行过程中的x,y坐标和一个时间间隔，放到数组里，这个数组长度大于100的话就停止搜集轨迹</p><p>我们在这埋下一个日志点</p><p><img src="https://p.ipic.vip/ar01rc.png" alt="image-20231019103245824"></p><p><img src="https://p.ipic.vip/ltfv6g.png" alt="image-20231019103334987"></p><p>这下是不是很清楚了，时间间隔就是当前的时间减去开始时间，开始的时间是固定的，所以间隔会越来越大</p><p>我们自己写一个模拟轨迹流程的算法，假设滑块里是120</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>) + min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">aesEncrypt</span>(<span class="params"><span class="keyword">as</span>, e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">as</span> + <span class="string">&quot;appsapi0&quot;</span></span><br><span class="line">        , n = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(t)</span><br><span class="line">        , i = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(e)</span><br><span class="line">        , r = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(i, n, &#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> r.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mouseAction</span>(<span class="params">distance</span>) &#123;</span><br><span class="line">    start_time = (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">getTime</span>()</span><br><span class="line">    <span class="comment">// 点击的位置</span></span><br><span class="line">    <span class="keyword">var</span> click = &#123;</span><br><span class="line">        <span class="string">&quot;x&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;y&quot;</span>: <span class="title function_">randomNum</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    jiange= <span class="number">100</span></span><br><span class="line">    <span class="comment">// part3: 开始滑动，次数根据需要滑动的距离（distance）而定</span></span><br><span class="line">    <span class="keyword">var</span> move_data = [[click.<span class="property">x</span>, click.<span class="property">y</span>, <span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">var</span> last_x = click.<span class="property">x</span> + <span class="title class_">Math</span>.<span class="title function_">round</span>(distance)</span><br><span class="line">    <span class="keyword">var</span> now_x = click.<span class="property">x</span> + <span class="title function_">randomNum</span>(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// 滑动第一个坐标，应该与点击的坐标点相近或者相等</span></span><br><span class="line">    move_data.<span class="title function_">push</span>([now_x, click.<span class="property">y</span> + <span class="title function_">randomNum</span>(<span class="number">0</span>, <span class="number">2</span>), jiange])</span><br><span class="line">    <span class="keyword">while</span> (now_x &lt; last_x) &#123;</span><br><span class="line">        jiange += <span class="title function_">randomNum</span>(<span class="number">99</span>, <span class="number">103</span>)</span><br><span class="line"></span><br><span class="line">        now_x += <span class="title function_">randomNum</span>(<span class="number">5</span>, <span class="number">20</span>)</span><br><span class="line">        move_data.<span class="title function_">push</span>([now_x, click.<span class="property">y</span> + <span class="title function_">randomNum</span>(<span class="number">0</span>, <span class="number">3</span>), jiange])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 滑动最后一个坐标，应该与 last_x 一致</span></span><br><span class="line">    move_data.<span class="title function_">push</span>([now_x, click.<span class="property">y</span> + <span class="title function_">randomNum</span>(<span class="number">0</span>, <span class="number">2</span>), jiange])</span><br><span class="line">    end_time = start_time + jiange</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;mouseData&#x27;</span>: move_data,</span><br><span class="line">        <span class="string">&#x27;startTime&#x27;</span>: start_time,</span><br><span class="line">        <span class="string">&#x27;endTime&#x27;</span>: end_time,</span><br><span class="line">        <span class="string">&#x27;mouseEndX&#x27;</span>: distance,</span><br><span class="line">        <span class="string">&#x27;trueWidth&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="string">&#x27;trueHeight&#x27;</span>: <span class="number">150</span>,</span><br><span class="line">        <span class="string">&#x27;selectData&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;blockWidth&#x27;</span>: <span class="number">40</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mouseAction</span>(<span class="number">120</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到轨迹之后就很简单了，参照js代码，写出我们模拟的代码</p><p><img src="https://p.ipic.vip/eeupnu.png" alt="image-20231019111012143"></p><p>结果：</p><p><img src="https://p.ipic.vip/knlhm6.png" alt="image-20231019111037381"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>我们按照思路写python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">debug=<span class="literal">True</span> <span class="comment"># 调试的时候打开</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;authority&#x27;</span>: <span class="string">&#x27;www.ishumei.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.ishumei.com/trial/captcha.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;118&quot;, &quot;Google Chrome&quot;;v=&quot;118&quot;, &quot;Not=A?Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">Jsfile = <span class="built_in">open</span>(<span class="string">&#x27;main.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">JsData = Jsfile.read()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUUID</span>():</span><br><span class="line">    <span class="keyword">return</span> execjs.<span class="built_in">compile</span>(JsData).call(<span class="string">&#x27;getUUID&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getParams</span>(<span class="params">k,l,distance,move_lis,use_time</span>):</span><br><span class="line">    <span class="keyword">return</span> execjs.<span class="built_in">compile</span>(JsData).call(<span class="string">&#x27;getParams&#x27;</span>, k, l, distance,move_lis,use_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_trace_and_times</span>(<span class="params">distance</span>):</span><br><span class="line">    x = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    z = [<span class="number">0</span>]</span><br><span class="line">    count = np.linspace(-math.pi / <span class="number">2</span>, math.pi / <span class="number">2</span>, random.randrange(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">    func = <span class="built_in">list</span>(<span class="built_in">map</span>(math.sin, count))</span><br><span class="line">    nx = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> func]</span><br><span class="line">    add = random.randrange(<span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">    sadd = distance + add</span><br><span class="line">    x.extend(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * (sadd / <span class="number">2</span>), nx)))</span><br><span class="line">    x.extend(np.linspace(sadd, distance, <span class="number">3</span> <span class="keyword">if</span> add &gt; <span class="number">12</span> <span class="keyword">else</span> <span class="number">2</span>))</span><br><span class="line">    x = [math.floor(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x) - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> y[-<span class="number">1</span>] &lt; <span class="number">30</span>:</span><br><span class="line">            y.append(y[-<span class="number">1</span>] + random.choice([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y.append(y[-<span class="number">1</span>] + random.choice([<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">3</span>, -<span class="number">3</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x) - <span class="number">1</span>):</span><br><span class="line">        z.append((z[-<span class="number">1</span>] // <span class="number">100</span> * <span class="number">100</span>) + <span class="number">100</span> + random.choice([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line">    trace = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">list</span>, <span class="built_in">zip</span>(x, y, z)))</span><br><span class="line">    times = trace[-<span class="number">1</span>][-<span class="number">1</span>] + random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># logger.debug(&#x27;轨迹数组：&#123;&#125;&#x27;.format(trace))</span></span><br><span class="line">    <span class="keyword">return</span> trace, times</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShuMei</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.UUID = getUUID()</span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到UUID: <span class="subst">&#123;self.UUID&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_organization</span>(<span class="params">self</span>):</span><br><span class="line">        url  = <span class="string">&#x27;https://www.ishumei.com/static/js/trial/captcha_7867b6f.js&#x27;</span></span><br><span class="line">        resp = requests.get(url, headers=headers)</span><br><span class="line">        organization = re.findall(<span class="string">&#x27;organization:&quot;(.*?)&quot;,&#x27;</span>, resp.text)[<span class="number">0</span>]</span><br><span class="line">        self.organization = organization</span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到organization: <span class="subst">&#123;organization&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_distance</span>(<span class="params">self, slice_content, bg_content</span>):</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;slice.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(slice_content)</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bg.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(bg_content)</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param bg_url: 背景图地址</span></span><br><span class="line"><span class="string">        :param slice_url: 滑块图地址</span></span><br><span class="line"><span class="string">        :return: distance</span></span><br><span class="line"><span class="string">        :rtype: Integer</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        slice_image = np.asarray(<span class="built_in">bytearray</span>(slice_content), dtype=np.uint8)</span><br><span class="line">        slice_image = cv2.imdecode(slice_image, <span class="number">1</span>) </span><br><span class="line">        slice_image = cv2.Canny(slice_image, <span class="number">22</span>, <span class="number">22</span>) <span class="comment"># 不准的话就调这几个参数，慢慢调</span></span><br><span class="line"></span><br><span class="line">        bg_image = np.asarray(<span class="built_in">bytearray</span>(bg_content), dtype=np.uint8)</span><br><span class="line">        bg_image = cv2.imdecode(bg_image, <span class="number">1</span>)</span><br><span class="line">        bg_image = cv2.pyrMeanShiftFiltering(bg_image, <span class="number">20</span>, <span class="number">11</span>)<span class="comment"># 不准的话就调这几个参数，慢慢调</span></span><br><span class="line">        bg_image = cv2.Canny(bg_image, <span class="number">20</span>, <span class="number">20</span>)<span class="comment"># 不准的话就调这几个参数，慢慢调</span></span><br><span class="line"></span><br><span class="line">        bg_image = cv2.cvtColor(bg_image, cv2.COLOR_GRAY2RGB)</span><br><span class="line">        slice_image = cv2.cvtColor(slice_image, cv2.COLOR_GRAY2RGB)</span><br><span class="line"></span><br><span class="line">        result = cv2.matchTemplate(bg_image, slice_image, cv2.TM_CCOEFF_NORMED)</span><br><span class="line"></span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            th, tw = slice_image.shape[:<span class="number">2</span>]</span><br><span class="line">            tl = max_loc  <span class="comment"># 左上角点的坐标</span></span><br><span class="line">            br = (tl[<span class="number">0</span>] + tw, tl[<span class="number">1</span>] + th)  <span class="comment"># 右下角点的坐标</span></span><br><span class="line">            cv2.rectangle(bg_image, tl, br, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)  <span class="comment"># 绘制矩形</span></span><br><span class="line">            cv2.imwrite(<span class="string">&#x27;out.jpg&#x27;</span>, bg_image)  <span class="comment"># 保存在本地</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [max_loc[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getContentOfImg</span>(<span class="params">self, url</span>):</span><br><span class="line">        resp = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">return</span> resp.content</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Register</span>(<span class="params">self</span>):</span><br><span class="line">        params = &#123;</span><br><span class="line">        <span class="string">&#x27;rversion&#x27;</span>: <span class="string">&#x27;1.0.4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;slide&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;appId&#x27;</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;&#123;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;captchaUuid&#x27;</span>: self.UUID,</span><br><span class="line">        <span class="string">&#x27;organization&#x27;</span>: self.organization,</span><br><span class="line">        <span class="string">&#x27;sdkver&#x27;</span>: <span class="string">&#x27;1.1.3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lang&#x27;</span>: <span class="string">&#x27;zh-cn&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;channel&#x27;</span>: <span class="string">&#x27;DEFAULT&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;callback&#x27;</span>: <span class="string">f&#x27;sm_<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span>&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        response = requests.get(<span class="string">&#x27;https://captcha1.fengkongcloud.cn/ca/v1/register&#x27;</span>, params=params, headers=headers,impersonate=<span class="string">&quot;chrome101&quot;</span>)</span><br><span class="line">        Jstext = response.text.split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;)&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        Jstext = json.loads(Jstext)</span><br><span class="line">        <span class="comment"># 拿到图片地址</span></span><br><span class="line">        self.img_bg = <span class="string">&#x27;https://castatic.fengkongcloud.cn&#x27;</span>+Jstext[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;bg&#x27;</span>]</span><br><span class="line">        <span class="comment"># self.img_bg = &#x27;https://castatic.fengkongcloud.cn/crb/set-000006/v2/ecb528a9e5a17657cbd2f15910cedf7b_bg.jpg&#x27;</span></span><br><span class="line">        self.img_fg = <span class="string">&#x27;https://castatic.fengkongcloud.cn&#x27;</span>+Jstext[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;fg&#x27;</span>]</span><br><span class="line">        <span class="comment"># self.img_fg = &#x27;https://castatic.fengkongcloud.cn/crb/set-000006/v2/ecb528a9e5a17657cbd2f15910cedf7b_fg.png&#x27;</span></span><br><span class="line">        <span class="comment"># 拿到k,l,rid</span></span><br><span class="line">        self.k = Jstext[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;k&#x27;</span>]</span><br><span class="line">        self.l = Jstext[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;l&#x27;</span>]</span><br><span class="line">        self.rid = Jstext[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;rid&#x27;</span>]</span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到背景图片地址: <span class="subst">&#123;self.img_bg&#125;</span>&#x27;</span>)</span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到滑块图片地址: <span class="subst">&#123;self.img_fg&#125;</span>&#x27;</span>)</span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到k: <span class="subst">&#123;self.k&#125;</span>&#x27;</span>)</span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到l: <span class="subst">&#123;self.l&#125;</span>&#x27;</span>)</span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到rid: <span class="subst">&#123;self.rid&#125;</span>&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getDistance</span>(<span class="params">self</span>):</span><br><span class="line">        slice_content = self.getContentOfImg(self.img_fg)</span><br><span class="line">        bg_content = self.getContentOfImg(self.img_bg)</span><br><span class="line">        distance = <span class="built_in">int</span>(self.get_distance(slice_content, bg_content)[<span class="number">0</span>]/<span class="number">2</span>)+<span class="number">3</span></span><br><span class="line">        logger.success(<span class="string">f&#x27;获取到distance: <span class="subst">&#123;distance&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> distance</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getVerifyParams</span>(<span class="params">self</span>):</span><br><span class="line">        distance = self.getDistance()</span><br><span class="line">        move_lis,use_time = get_trace_and_times(distance)</span><br><span class="line">        params = getParams(self.k, self.l, distance,move_lis,use_time)</span><br><span class="line">        params = &#123;**params, ** &#123;</span><br><span class="line">            <span class="string">&#x27;sdkver&#x27;</span>: <span class="string">&#x27;1.1.3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;callback&#x27;</span>: <span class="string">f&#x27;sm_<span class="subst">&#123;<span class="built_in">int</span>(time.time()*<span class="number">1000</span>)&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;act.os&#x27;</span>: <span class="string">&#x27;web_pc&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;organization&#x27;</span>: self.organization,</span><br><span class="line">            <span class="string">&#x27;rversion&#x27;</span>: <span class="string">&#x27;1.0.4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ostype&#x27;</span>: <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;rid&#x27;</span>: self.rid,</span><br><span class="line">            <span class="string">&#x27;captchaUuid&#x27;</span>: self.UUID,</span><br><span class="line">            <span class="string">&#x27;protocol&#x27;</span>: <span class="string">&#x27;179&#x27;</span>,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        logger.debug(<span class="string">f&#x27;获取到params: <span class="subst">&#123;params&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> params</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self,params</span>):</span><br><span class="line">        headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://www.ishumei.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.ishumei.com/trial/captcha.html&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;118&quot;, &quot;Google Chrome&quot;;v=&quot;118&quot;, &quot;Not=A?Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        response = requests.get(<span class="string">&#x27;https://captcha1.fengkongcloud.cn/ca/v2/fverify&#x27;</span>, params=params, headers=headers,impersonate=<span class="string">&quot;chrome101&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;REJECT&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            logger.error(<span class="string">f&#x27;获取到response: <span class="subst">&#123;response.text&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.success(<span class="string">f&#x27;获取到response: <span class="subst">&#123;response.text&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    shumei = ShuMei()</span><br><span class="line">    shumei.get_organization()</span><br><span class="line">    shumei.Register()</span><br><span class="line">    params = shumei.getVerifyParams()</span><br><span class="line">    shumei.verify(params)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://p.ipic.vip/h7s6tq.png" alt="image-20231019214434696"></p><h2 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h2><ol><li>AST混淆顺序ob 对象还原需要两次</li><li>控制流还原需要还原两次</li><li>js代码里尽量不要直接写固定值，哪怕调试的时候是固定的，需要再三确认是固定的，再写死</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;请求参数分析&quot;&gt;&lt;a href=&quot;#请求参数分析&quot; class=&quot;headerlink&quot; title=&quot;请求参数分析&quot;&gt;&lt;/a&gt;请求参数分析&lt;/h2&gt;&lt;h3 id=&quot;拿到滑块图片&quot;&gt;&lt;a href=&quot;#拿到滑块图片&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="逆向 滑块" scheme="http://qwd.ai/categories/%E9%80%86%E5%90%91-%E6%BB%91%E5%9D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>一次踩坑的IOS逆向</title>
    <link href="http://qwd.ai/2023/10/10/%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91%E7%9A%84IOS%E9%80%86%E5%90%91/"/>
    <id>http://qwd.ai/2023/10/10/%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91%E7%9A%84IOS%E9%80%86%E5%90%91/</id>
    <published>2023-10-10T15:18:31.000Z</published>
    <updated>2023-10-10T15:18:31.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>一个比较有意思的app，在数据抓取的时候发现： ios端的app未登录的用户有几十次免费查看数据的机会，而安卓app强制登录才能查看信息。</p><p>让我想到有没有一种办法可以模拟无限个新用户，那就不需要注册即可采集了。</p><p>说干就干</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>一开始我以为ios端跟安卓端一样可以快乐的抓包，后来发现ios端的是真的难抓，我就怀疑是不是ios手机没有越狱</p><p>注： 以下都是基于Charles证书安装好的情况下</p><h3 id="ios越狱"><a href="#ios越狱" class="headerlink" title="ios越狱"></a>ios越狱</h3><p>不舍得让我的14pm 越狱，所以直接去tb买了台备用越狱机子，如果有老机子我肯定自己动手越狱，其实难度不大，i4tools有一键越狱。</p><h3 id="安装Filza"><a href="#安装Filza" class="headerlink" title="安装Filza"></a>安装Filza</h3><p>在Cydia里 【软件源】——【编辑】——【添加】——【输入apt.abcydia.com】</p><p>添加完成后，在 Cydia 的搜索栏中输入「Filza」进行下载。</p><h3 id="安装SSL-Kill-Switch2"><a href="#安装SSL-Kill-Switch2" class="headerlink" title="安装SSL Kill Switch2"></a>安装SSL Kill Switch2</h3><p>借助插件 SSL Kill Switch 2 可以突破 SSL 双向认证，下载地址：<a href="https://github.com/nabla-c0d3/ssl-kill-switch2%E3%80%82">https://github.com/nabla-c0d3/ssl-kill-switch2。</a></p><p>下载完成后通过sftp将安装包传入手机，使用Filza安装deb文件</p><p>然后在设置里开启SSL Kill Switch2，再次尝试抓包</p><h2 id="再次尝试抓包"><a href="#再次尝试抓包" class="headerlink" title="再次尝试抓包"></a>再次尝试抓包</h2><p>上述步骤设置完，还是抓不到，而且只要一抓包就会无法联网。</p><p>看来不能用常规手段解决这个问题。</p><p>那就试一下号称什么包都能抓到的r0capture能不能解决问题</p><h3 id="安装frida"><a href="#安装frida" class="headerlink" title="安装frida"></a>安装frida</h3><p>在Cydia里 【软件源】——【编辑】——【添加】——【输入build.frida.re】</p><p>添加完成后，在 Cydia 的搜索栏中输入「frida」进行下载。</p><h3 id="r0capture"><a href="#r0capture" class="headerlink" title="r0capture"></a>r0capture</h3><p>下载地址：<a href="https://github.com/r0ysue/r0capture">https://github.com/r0ysue/r0capture</a></p><p>配置方式： <a href="https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A01/README.md">https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A01/README.md</a></p><p>配置完成后，命令行输入<code>python3 r0capture.py -U -f 包名 -v</code></p><p>随着屏幕跳出目标app, 它顺利的展示了数据（不存在无法联网的情况）</p><p>然后终端陆陆续续的展示出https包解密后的数据…..（r0牛！）</p><h2 id="定位参数"><a href="#定位参数" class="headerlink" title="定位参数"></a>定位参数</h2><p>抓到包之后发现果然ios跟安卓的请求头是不一的（估计是俩外包团队开发的）</p><p>发现有两个字段： <code>authCode</code> <code>authCodeEncrypt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authCode: *****-1A44E742-99BB-4B8A-972E-7F2A53D4D02A..Accept: */*..authCodeEncrypt: 2e940536fb12e372a8b413a7755760a5</span><br></pre></td></tr></table></figure><p>现在就是搞定这俩字段，模拟生成即可</p><h2 id="获取ipa包"><a href="#获取ipa包" class="headerlink" title="获取ipa包"></a>获取ipa包</h2><p>安卓里的是apk安装包，ios里的是ipa包，可以通过App Store获取（几乎都是加密带壳的），或者第三方渠道（基本没壳）</p><p>之前我们可以通过iTunes来提取商店的ipa文件, 但12.+版本以后这个功能就被拿掉了</p><p>目前可以借用Apple Configurator 工具来实现 </p><p>安装:</p><p>可以直接在App Store搜索安装</p><p><img src="https://p.ipic.vip/dzv155.png" alt="image-20231009160159833"></p><p>手机和电脑通过数据线连接，打开app，可以看到自己的手机了</p><p><img src="https://p.ipic.vip/7wm4jw.png" alt="image-20231009160311866"></p><p><img src="https://p.ipic.vip/0vm0ec.png" alt="image-20231009160505635"></p><p>在弹出的搜索框中输入想要提取的app名称</p><p>保持等待, 下载完后会提示是否替换,  这个时候注意不要做任何操作</p><p>右键点击Finder选择前往文件夹, 输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/</span><br></pre></td></tr></table></figure><p>进入文件的最深层路径, 可以找到该App的ipa包（注意这里是加壳的！）</p><h2 id="砸壳"><a href="#砸壳" class="headerlink" title="砸壳"></a>砸壳</h2><p>iOS中的app，发布渠道一般都是<code>App Store</code>。</p><p>从<code>App Store</code>下载的APP全都是经过苹果加密过的<code>ipa</code>包。</p><p>而Apple会为了安全，给app加密(使用Apple ID相关的对称加密算法)，这个过程俗称为：<code>加壳</code>，就像给app外部上加了一层壳</p><p><img src="https://p.ipic.vip/34250n.png" alt="image-20231010222613103"></p><p>而加密后的<code>ipa</code>包，是无法继续后续的逆向过程的</p><ul><li>后续的典型的逆向过程是<ul><li>用<code>IDA</code>&#x2F;<code>Hooper</code>等去<code>反编译</code></li><li>用class-dump等去导出头文件</li><li>class-dump直接去导出，未砸壳的App Store上的二进制的话只能导出<code>CDStructures.h</code>这个空的头文件，无法得到想要的各种类的头文件</li><li>对砸壳后的ipa，去用<code>MonkeyDev</code>动态调试</li></ul></li></ul><p>很多网站可以免费砸壳，或者收费很少。</p><p>咱自己动手丰衣足食，Cydia下载一个CrackerXL+，无脑砸壳</p><p>具体不再说了，很简单的操作，参考这篇文章<a href="https://www.jianshu.com/p/d1712e515432">https://www.jianshu.com/p/d1712e515432</a></p><p>砸壳完成后会给到.ipa文件</p><p>只需要改成.zip然后解压就能看到app了</p><p>右键app——显示包内容</p><p>然后在该文件夹进入终端</p><p>输入 <code>otool -l 应用名  | grep crypt </code></p><p>出现<code>cryptid 0</code>就是砸壳成功了</p><p><img src="https://p.ipic.vip/lwj6if.png" alt="image-20231010223119598"></p><h2 id="导出-h头文件"><a href="#导出-h头文件" class="headerlink" title="导出.h头文件"></a>导出.h头文件</h2><p>首先下载class-dump、添加到环境变量</p><p>亲身尝试安装官网版本会报错</p><p><code>Cannot find offset for address xxx in stringAtAddress:</code></p><p>推荐下载大佬改造版本</p><p><a href="https://github.com/AloneMonkey/MonkeyDev/blob/master/bin/class-dump">https://github.com/AloneMonkey/MonkeyDev/blob/master/bin/class-dump</a></p><p>输入<code>class-dump -H qitongcha -o ./headers/ </code></p><p>看到一对日志输出，全是什么failed，我晕</p><p><img src="https://p.ipic.vip/8k65uw.png" alt="image-20231010225942873"></p><p>但是headers文件夹确实出现了很多.h文件</p><p><img src="https://p.ipic.vip/pg0wlh.png" alt="image-20231010230020515"></p><p>遇事不决直接百度：<a href="https://iosre.com/t/class-dump%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95%E7%B1%BB%E5%9E%8B%E5%A4%B1%E8%B4%A5/10067/6">参考这里</a></p><p>那就是有文件缺失喽，在.h头文件里全局搜索关键字，也是没有找到。。这条线直接断了</p><h2 id="Hopper分析二进制文件"><a href="#Hopper分析二进制文件" class="headerlink" title="Hopper分析二进制文件"></a>Hopper分析二进制文件</h2><p>转头一想，既然已经有可执行文件了，那我直接分析二进制不得了。</p><p>打开hopper,二进制文件直接拖进去，点OK</p><p><img src="https://p.ipic.vip/83ohk6.png" alt="image-20231010230355125"></p><p>点左侧搜索栏进行搜索</p><p><img src="https://p.ipic.vip/j00grz.png" alt="image-20231010230511992"></p><p>果然找到了！</p><p><img src="https://p.ipic.vip/emm9p0.png" alt="image-20231010230548186"></p><p>找到相关代码位置</p><p><img src="https://p.ipic.vip/g7x4nl.png" alt="image-20231010230645054"></p><p>点击这里查看伪代码</p><p><img src="https://p.ipic.vip/6gc7vk.png" alt="image-20231010230721308"></p><p><img src="https://p.ipic.vip/p2ejev.png" alt="image-20231010230741431"></p><p>接下来就是看伪代码，因为不太懂怎么动态调试的，所以只能静态分析</p><p>经过漫长的分析，最终得出结论</p><p><code>authCode</code>是一个UUID</p><p><img src="https://p.ipic.vip/znxbcp.png" alt="image-20231010231016923"></p><p>而<code>authCodeEncrypt</code>是一个md5有关的一个加密后的字段。</p><p>呃。既然不能直接动态调试，那我直接用frida Hook下所有的md5不就可以了吗</p><h2 id="Frida-Trace"><a href="#Frida-Trace" class="headerlink" title="Frida-Trace"></a>Frida-Trace</h2><p>上面已经安装好了Frida,这里不再赘述</p><p>先定位到进程的pid</p><p>然后直接输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i &quot;CC_MD5&quot; 8701</span><br></pre></td></tr></table></figure><p>这时候会生成一个文件夹<code>__handlers__</code></p><p>找到里面的CC_MD5.js</p><p>写入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="title function_">onEnter</span>(<span class="params">log, args, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args0</span> = args[<span class="number">0</span>];<span class="comment">// 入参</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args2</span> = args[<span class="number">2</span>];<span class="comment">// 返回值指针</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onLeave</span>(<span class="params">log, retval, state</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ByteArray</span> = <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(<span class="variable language_">this</span>.<span class="property">args2</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">var</span> uint8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="title class_">ByteArray</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uint8Array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> hextemp = (uint8Array[i].<span class="title function_">toString</span>(<span class="number">16</span>))</span><br><span class="line">        <span class="keyword">if</span>(hextemp.<span class="property">length</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            hextemp = <span class="string">&quot;0&quot;</span> + hextemp</span><br><span class="line">        &#125;</span><br><span class="line">        str += hextemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">`CC_MD5(<span class="subst">$&#123;<span class="variable language_">this</span>.args0.readUtf8String()&#125;</span>)`</span>);   <span class="comment">// 入参</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">`CC_MD5()=<span class="subst">$&#123;str&#125;</span>=`</span>);<span class="comment">// 返回值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再次输入trace命令</p><p>出值，完事！</p><p>加密逻辑为：authCodeEncrypt&#x3D;md5(前缀+authCode+盐)</p><p><img src="https://p.ipic.vip/hxsf4m.png" alt="image-20231010231727574"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;一个比较有意思的app，在数据抓取的时候发现： ios端的app未登录的用户有几十次免费查看数据的机会，而安卓app强制登录才能查看信息。&lt;/p&gt;
&lt;p&gt;让我想到有没有一种办法可以</summary>
      
    
    
    
    <category term="IOS逆向" scheme="http://qwd.ai/categories/IOS%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Ububtu挂载新磁盘</title>
    <link href="http://qwd.ai/2023/10/09/Ububtu%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A3%81%E7%9B%98/"/>
    <id>http://qwd.ai/2023/10/09/Ububtu%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A3%81%E7%9B%98/</id>
    <published>2023-10-09T07:24:52.000Z</published>
    <updated>2023-10-09T07:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>为Ubuntu系统安装一个新的磁盘涉及到以下几个步骤：</p><ol><li><p><strong>物理安装</strong>：首先，确保已经将新的磁盘物理安装到了计算机中。这通常涉及到打开计算机的外壳，找到一个空的SATA端口（或其他相应的端口，取决于磁盘类型），然后连接数据线和电源线。</p></li><li><p><strong>检测新磁盘</strong>：安装好后，开机进入Ubuntu系统，打开终端，输入以下命令来查看新磁盘是否被系统检测到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure></li><li><p><strong>分区与格式化</strong>：</p><ul><li><p>使用<code>fdisk</code>或<code>parted</code>工具进行分区。例如，如果新磁盘为<code>/dev/sdb</code>，可以使用<code>sudo fdisk /dev/sdb</code>来为它创建新的分区。</p><p>之后，进入<code>fdisk</code>的交互模式：</p><p>如果磁盘大于2T:</p><ul><li>输入 <code>g</code> 并回车，创建一个新的GPT分区表（由于磁盘大于2TB，建议使用GPT）。</li></ul><p>否则跳过上述步骤：</p><ul><li>输入 <code>n</code> 并回车，开始创建新分区。对于提示，您可以接受默认值以使用整个磁盘容量，或自定义分区大小。</li><li>输入 <code>w</code> 并回车，保存更改并退出。</li></ul></li><li><p>分区完成后，需要为新分区创建文件系统。例如，如果创建了一个新分区<code>/dev/sdb1</code>，并希望格式化为<code>ext4</code>格式，可以使用以下命令：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure></li><li><p><strong>挂载新磁盘</strong>：</p><ul><li>首先创建一个挂载点，例如 <code>/mnt/newdisk</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /mnt/newdisk</span><br></pre></td></tr></table></figure><ul><li>然后挂载新的分区到该挂载点：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sdb1 /mnt/newdisk</span><br></pre></td></tr></table></figure></li><li><p><strong>自动挂载</strong>：如果希望每次启动系统时自动挂载新磁盘，需要编辑<code>/etc/fstab</code>文件。但在此之前，建议先使用<code>blkid</code>命令获取新分区的UUID：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid</span><br></pre></td></tr></table></figure><p>记录下<code>/dev/sdb1</code>（或您的新分区）的UUID，然后编辑<code>/etc/fstab</code>，在文件末尾添加一行类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=YOUR_UUID /mnt/newdisk ext4 defaults 0 2</span><br></pre></td></tr></table></figure><p>请将<code>YOUR_UUID</code>替换为实际的UUID。</p></li><li><p><strong>完成并测试</strong>：重新启动计算机，确保新磁盘可以自动挂载，并且可以正常访问它。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为Ubuntu系统安装一个新的磁盘涉及到以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;物理安装&lt;/strong&gt;：首先，确保已经将新的磁盘物理安装到了计算机中。这通常涉及到打开计算机的外壳，找到一个空的SATA端口（或其他相应的端口，取决于磁盘类型），然后</summary>
      
    
    
    
    <category term="Ubuntu" scheme="http://qwd.ai/categories/Ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac Selenium 调试老版本Chrome</title>
    <link href="http://qwd.ai/2023/08/23/Mac-Selenium-%E8%B0%83%E8%AF%95%E8%80%81%E7%89%88%E6%9C%ACChrome/"/>
    <id>http://qwd.ai/2023/08/23/Mac-Selenium-%E8%B0%83%E8%AF%95%E8%80%81%E7%89%88%E6%9C%ACChrome/</id>
    <published>2023-08-23T03:33:04.000Z</published>
    <updated>2023-08-23T03:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>今天需要用Selenium调试一个网页，发现Chrom版本太高了（116.0.5845.96），ChromeDriver跟不上版本了（最新114.0.5735.90），下面是解决方式。</p><h2 id="下载老版本Chrome"><a href="#下载老版本Chrome" class="headerlink" title="下载老版本Chrome"></a>下载老版本Chrome</h2><p><a href="https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac_Arm/">最全的Chrome历史版本网址</a></p><p>找到一个与ChromeDriver最新版本对应的Chrome版本下载</p><p>下载完成解压</p><p><img src="https://p.ipic.vip/6i860a.png" alt="image-20230823112019569"></p><p>这个可以当做专门调试Selenium的Chrome（开发版）</p><p>然后移动到一个不会被误删的位置，比如应用程序</p><p>直接拖进去即可，然后就能在app调度中心看到它了</p><p><img src="https://p.ipic.vip/ghwm23.png" alt="image-20230823112147896"></p><h2 id="下载ChromeDriver"><a href="#下载ChromeDriver" class="headerlink" title="下载ChromeDriver"></a>下载ChromeDriver</h2><p><a href="https://chromedriver.storage.googleapis.com/index.html">下载地址</a></p><p>下载最新版的即可</p><p>下载完毕之后解压到跟Chromium可执行文件同级目录即可，因为我们后面要添加环境变量，就直接把它俩一起添加进去了！</p><p>比如我这里的是&#x2F;Applications&#x2F;Chromium.app&#x2F;Contents&#x2F;MacOS</p><p>那就挪到这个位置</p><p><img src="https://p.ipic.vip/yth0tk.png" alt="image-20230823112526524"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>我用的是zsh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>添加到最后一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/Applications/Chromium.app/Contents/MacOS:$PATH&quot;</span><br></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="Python调试"><a href="#Python调试" class="headerlink" title="Python调试"></a>Python调试</h2><p>调试之前，需要在终端打开一个Chromium</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chromium --remote-debugging-port=19222 --user-data-dir=&quot;~/ChromeProfile&quot;</span><br></pre></td></tr></table></figure><p>注意： 如果不添加到环境变量的话，该命令是无法执行成功的</p><p>这个时候我们就可以通过19222端口来调试该浏览器了~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;debuggerAddress&quot;</span>, <span class="string">&quot;127.0.0.1:19222&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该方式可以把调试的Chrome和日常使用的Chrome独立开，而且Chrome版本可定制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;


&lt;p&gt;今天需要用Selenium调试一个网页，发现Chrom版本太高了（116.0.5845.96），ChromeDriver跟不上版本了（最新114.0.5735.90），下面是解决</summary>
      
    
    
    
    <category term="调试" scheme="http://qwd.ai/categories/%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 下Clash 科学上网</title>
    <link href="http://qwd.ai/2023/08/18/Linux-%E4%B8%8BClash-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://qwd.ai/2023/08/18/Linux-%E4%B8%8BClash-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2023-08-17T16:53:44.000Z</published>
    <updated>2023-08-17T16:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># Linux 科学上网<h2 id="下载Clash"><a href="#下载Clash" class="headerlink" title="下载Clash"></a>下载Clash</h2><p><a href="https://github.com/Dreamacro/clash/releases/download/v1.18.0/clash-linux-amd64-v3-v1.18.0.gz">下载地址</a></p><p>复制到Linux 随意目录下 解压出来</p><p>然后chmod +x .&#x2F;clash-linux-amd64</p><h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><p>执行完上述步骤，会在&#x2F;root&#x2F;.config&#x2F;clash 自动生成配置文件</p><p>在机场注册购买流量后</p><p>复制V2Ray链接进入<a href="https://sub.789.st/">链接转换</a>选择基础模式转换即可</p><p>然后把转换后的链接下载下来</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/clash/config.yaml [你的订阅链接]</span><br></pre></td></tr></table></figure><h2 id="启动Clash"><a href="#启动Clash" class="headerlink" title="启动Clash"></a>启动Clash</h2><p>我的个人习惯是开启一个tmux窗体</p><p>然后执行<code>./clash-linux-amd64 &amp;</code></p><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p><code>vim ~/.zshrc</code></p><p>最后一行添加</p><p><code>export ALL_PROXY=socks5://127.0.0.1:7891</code></p><p>保存退出</p><p><code>source ~/.zshrc</code></p><p>新开个终端，即可~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
# Linux 科学上网

&lt;h2 id=&quot;下载Clash&quot;&gt;&lt;a href=&quot;#下载Clash&quot; class=&quot;headerlink&quot; title=&quot;下载Clash&quot;&gt;&lt;/a&gt;下载Cla</summary>
      
    
    
    
    <category term="Linux" scheme="http://qwd.ai/categories/Linux/"/>
    
    
    <category term="科学上网" scheme="http://qwd.ai/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>某查 Token Xposed+Sekiro 升级方案</title>
    <link href="http://qwd.ai/2023/07/19/%E6%9F%90%E6%9F%A5-Token-Xposed-Sekiro-%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88/"/>
    <id>http://qwd.ai/2023/07/19/%E6%9F%90%E6%9F%A5-Token-Xposed-Sekiro-%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88/</id>
    <published>2023-07-19T12:13:59.000Z</published>
    <updated>2023-07-19T12:13:59.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># 某查 Token Xposed+Sekiro 升级方案<h2 id="Xposed-Frida-对比"><a href="#Xposed-Frida-对比" class="headerlink" title="Xposed Frida 对比"></a>Xposed Frida 对比</h2><p>当涉及到安卓逆向工程中的Xposed和Frida时，它们都有各自的优点和缺点。下面是对它们进行详细比较：</p><table><thead><tr><th></th><th>Xposed</th><th>Frida</th></tr></thead><tbody><tr><td>实现原理</td><td>通过修改应用程序的DEX文件来实现对应用程序的修改和扩展</td><td>通过在应用程序中注入JavaScript代码来实现对应用程序的修改和扩展</td></tr><tr><td>安装配置</td><td>需要安装Xposed框架和相应的模块</td><td>需要在设备上安装Frida服务器和Frida客户端</td></tr><tr><td>功能定制</td><td>通过选择和启用&#x2F;禁用不同的Xposed模块来实现功能定制</td><td>可以使用JavaScript代码实现对应用程序的定制</td></tr><tr><td>兼容性</td><td>需要与特定版本的安卓系统兼容</td><td>支持多种安卓版本和架构</td></tr><tr><td>开发门槛</td><td>需要了解Xposed框架和模块开发的基本知识</td><td>需要了解JavaScript和Frida的API</td></tr><tr><td>功能强大性</td><td>提供丰富的Xposed模块和功能扩展</td><td>具有更灵活的动态插桩和功能定制能力</td></tr><tr><td>性能影响</td><td>可能对应用程序的性能产生一定影响</td><td>对应用程序的性能影响较小</td></tr></tbody></table><p>Xposed的优势在于它提供了丰富的Xposed模块，可以直接选择和启用&#x2F;禁用这些模块来实现功能定制。它的兼容性取决于与特定版本的安卓系统的兼容性，但在兼容的情况下，它可以对应用程序进行较为深入的修改。</p><p>Frida的优势在于它具有更灵活的动态插桩和功能定制能力。通过注入JavaScript代码，开发者可以对应用程序的函数进行替换、监视和调用，实现更细粒度的修改。Frida支持多种安卓版本和架构，因此在兼容性方面更加灵活。</p><h2 id="Xposed-开发"><a href="#Xposed-开发" class="headerlink" title="Xposed 开发"></a>Xposed 开发</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>打开 AndroidStudio,简单的 Xposed 插件不需要任何Activity。</p><p><img src="https://p.ipic.vip/5nsqxg.png" alt="image-20230719191310926"></p><p><img src="https://p.ipic.vip/b9cfb2.png" alt="image-20230719191455045"></p><p>选择 Project 模式</p><p><img src="https://p.ipic.vip/u2xr5t.png" alt="image-20230719191536460"></p><h3 id="熟悉目录"><a href="#熟悉目录" class="headerlink" title="熟悉目录"></a>熟悉目录</h3><p>目录如下</p><p><img src="https://p.ipic.vip/ibl4cp.png" alt="image-20230719191932153"></p><p>下面是对上述文件夹目录的详细介绍：</p><ul><li><p><code>app</code> 目录是 Android 项目的主要目录，包含应用的主要代码和资源文件。</p><ul><li><code>build.gradle</code> 是应用的构建脚本，用于配置构建过程和依赖项。</li><li><code>libs</code> 目录用于存放应用所需的第三方库文件（例如 JAR 文件）。</li><li><code>proguard-rules.pro</code> 是 ProGuard 的规则文件，用于代码混淆和优化。</li><li><code>src</code> 目录包含应用的源代码和资源文件。<ul><li><code>androidTest</code> 目录用于存放应用的 Android 测试代码。<ul><li><code>java</code> 目录是存放 Android 测试代码的 Java 源代码目录。</li></ul></li><li><code>main</code> 目录是主要的源代码目录，包含应用的主要逻辑和资源。<ul><li><code>AndroidManifest.xml</code> 是 Android 应用的清单文件，包含应用的配置信息和组件声明。</li><li><code>java</code> 目录是存放应用的 Java 源代码的目录。<ul><li><code>com.example.app</code> 是你在创建项目时指定的包名，你的 Java 代码文件应该放在这个目录或其子目录中。</li></ul></li><li><code>res</code> 目录是存放应用的资源文件的目录。</li></ul></li><li><code>test</code> 目录用于存放应用的单元测试代码。<ul><li><code>java</code> 目录是存放应用的单元测试代码的 Java 源代码目录。</li></ul></li></ul></li></ul></li><li><p><code>build.gradle</code> 是项目的根级构建脚本，用于配置整个项目的构建过程和依赖项。</p></li><li><p><code>gradle</code> 目录是存放 Gradle 构建工具的目录。</p><ul><li><code>wrapper</code> 目录包含 Gradle Wrapper 相关的文件，用于自动下载和运行指定版本的 Gradle。<ul><li><code>gradle-wrapper.jar</code> 是 Gradle Wrapper 的 JAR 文件。</li><li><code>gradle-wrapper.properties</code> 是 Gradle Wrapper 的配置文件。</li></ul></li></ul></li><li><p><code>gradle.properties</code> 是项目的 Gradle 配置文件，用于定义项目级的属性和变量。</p></li><li><p><code>gradlew</code> 和 <code>gradlew.bat</code> 是可执行的 Gradle Wrapper 脚本，用于在命令行中运行 Gradle 命令。</p></li><li><p><code>local.properties</code> 是本地配置文件，用于指定 Android SDK 的路径。</p></li><li><p><code>settings.gradle</code> 是项目的设置文件，用于配置项目的模块和构建选项。</p></li></ul><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><h4 id="引入-Jar包"><a href="#引入-Jar包" class="headerlink" title="引入 Jar包"></a>引入 Jar包</h4><p>将下载好的 Jar 包直接拉入 app&#x2F;libs</p><p><img src="https://p.ipic.vip/1rtavd.png" alt="image-20230719193010637"></p><p>然后右键选这个再点 Ok ，这样才能在代码中引入Jar 包</p><p><img src="https://p.ipic.vip/dnf3xp.png" alt="image-20230719193208927"></p><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><p>打开 app 目录下的<code> build.gradle</code></p><p>会发现<code>dependencies</code>多了两行，为了只编译不打包，节省空间，删掉这行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="title function_">files</span><span class="params">(<span class="string">&#x27;libs/XposedBridgeApi-82.jar&#x27;</span>)</span></span><br><span class="line">implementation <span class="title function_">files</span><span class="params">(<span class="string">&#x27;libs/sekiro-open-demo-0.0.1.jar&#x27;</span>)</span></span><br></pre></td></tr></table></figure><p>然后引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.virjar:sekiro-api:1.0.1&#x27;</span></span><br><span class="line">compileOnly <span class="string">&#x27;de.robv.android.xposed:api:82&#x27;</span>  <span class="comment">// 设置只编译不打包</span></span><br><span class="line">implementation(<span class="string">&#x27;cn.iinti.sekiro3.business:sekiro-business-api:1.1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最终是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.virjar:sekiro-api:1.0.1&#x27;</span></span><br><span class="line">    compileOnly <span class="string">&#x27;de.robv.android.xposed:api:82&#x27;</span>  <span class="comment">// 设置只编译不打包</span></span><br><span class="line">    implementation(<span class="string">&#x27;cn.iinti.sekiro3.business:sekiro-business-api:1.1&#x27;</span>)</span><br><span class="line">    implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.6.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.material:material:1.8.0&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.13.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 android 下增加<code>packagingOptions</code></p><p>最终是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    namespace <span class="string">&#x27;com.example.tychook&#x27;</span></span><br><span class="line">    compileSdk <span class="number">33</span></span><br><span class="line"></span><br><span class="line">    packagingOptions &#123;</span><br><span class="line"></span><br><span class="line">        exclude<span class="string">&#x27;META-INF/INDEX.LIST&#x27;</span></span><br><span class="line">        exclude<span class="string">&#x27;META-INF/io.netty.versions.properties&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.example.tychook&quot;</span></span><br><span class="line">        minSdk <span class="number">24</span></span><br><span class="line">        targetSdk <span class="number">33</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles <span class="title function_">getDefaultProguardFile</span><span class="params">(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>)</span>, <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h4><p>打开根目录下的settings.gradle文件，我们需要引入Xposed和 Sekiro的库</p><p>在dependencyResolutionManagement下的repositories添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    google()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://api.xposed.info/&#x27;</span> &#125; </span><br><span class="line">    maven &#123; url <span class="string">&quot;https://nexus.iinti.cn/repository/maven-public/&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h4><p>在 app&#x2F;src&#x2F;main&#x2F;AndroidManifest.xml 添加 xposed文件描述，并指出这是一个 xposed 插件,直接复制即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dataExtractionRules</span>=<span class="string">&quot;@xml/data_extraction_rules&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fullBackupContent</span>=<span class="string">&quot;@xml/backup_rules&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:targetApi</span>=<span class="string">&quot;31&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否为Xposed模块 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;xposedmodule&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 模块的简介（在框架中显示） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;xposeddescription&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">&quot;我是Xposed模块简介&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 模块最低支持的Api版本 一般填54即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;xposedminversion&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">&quot;82&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>xposedmodule 表明是一个xposed模块</li><li>xposeddescription 描述</li><li>xposedminversion API version(一般等于构建它的Xposed的version）</li></ul><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><h4 id="Class-文件"><a href="#Class-文件" class="headerlink" title="Class 文件"></a>Class 文件</h4><p>右键，新建一个 Class<code>HookStart</code></p><p><img src="https://p.ipic.vip/6ef964.png" alt="image-20230719194859725"></p><h4 id="Sekiro-代码"><a href="#Sekiro-代码" class="headerlink" title="Sekiro 代码"></a>Sekiro 代码</h4><p>Sekiro 长链接代码参考 <a href="http://sekiro.iinti.cn/sekiro-doc/01_manual/1.quickstart.html#android-xposed">官网 demo</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XposedMain</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loadPackageParam.processName.equals(<span class="string">&quot;cn.iinti.sekiroApp&quot;</span>)) &#123;<span class="comment">// 请注意，一般sekiro只作用于特定的app</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SekiroClient</span>(<span class="string">&quot;test_xposed&quot;</span>, UUID.randomUUID().toString())</span><br><span class="line">                    .setupSekiroRequestInitializer((sekiroRequest, handlerRegistry) -&gt;</span><br><span class="line">                            handlerRegistry.registerSekiroHandler(<span class="keyword">new</span> <span class="title class_">ActionHandler</span>() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> String <span class="title function_">action</span><span class="params">()</span> &#123;</span><br><span class="line">                                    <span class="keyword">return</span> <span class="string">&quot;testAction&quot;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(SekiroRequest sekiroRequest, SekiroResponse sekiroResponse)</span> &#123;</span><br><span class="line">                                    sekiroResponse.success(<span class="string">&quot;ok&quot;</span>);<span class="comment">// 接口处理逻辑，我们不做任何处理，直接返回字符串：ok</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                    ).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不一样的是，我们需要用SekiroClient另一个重写版本，直接看源码即可，直接看截图</p><p><img src="https://p.ipic.vip/lq5kqr.png" alt="image-20230719195656473"></p><h4 id="最终Hook代码"><a href="#最终Hook代码" class="headerlink" title="最终Hook代码"></a>最终Hook代码</h4><p>写入我们的 Hook 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testxp;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> cn.iinti.sekiro3.business.api.SekiroClient;</span><br><span class="line"><span class="keyword">import</span> cn.iinti.sekiro3.business.api.interfaze.ActionHandler;</span><br><span class="line"><span class="keyword">import</span> cn.iinti.sekiro3.business.api.interfaze.SekiroRequest;</span><br><span class="line"><span class="keyword">import</span> cn.iinti.sekiro3.business.api.interfaze.SekiroResponse;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookStart</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 过滤不必要的应用</span></span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.tianyancha.skyeye&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SekiroClient</span>(<span class="string">&quot;xposed&quot;</span>, UUID.randomUUID().toString(),<span class="string">&quot;自己的服务器地址&quot;</span>,<span class="number">5621</span>)</span><br><span class="line">                .setupSekiroRequestInitializer((sekiroRequest, handlerRegistry) -&gt;</span><br><span class="line">                        handlerRegistry.registerSekiroHandler(<span class="keyword">new</span> <span class="title class_">ActionHandler</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> String <span class="title function_">action</span><span class="params">()</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">&quot;tycHeaderAuth&quot;</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(SekiroRequest sekiroRequest, SekiroResponse sekiroResponse)</span> &#123;</span><br><span class="line">                                <span class="comment">// 主动调用 com.tianyancha.base.utils.g3 下的 a0 方法</span></span><br><span class="line">                                Class&lt;?&gt; targetClass = XposedHelpers.findClass(<span class="string">&quot;com.tianyancha.base.utils.g3&quot;</span>, loadPackageParam.classLoader);</span><br><span class="line">                                <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> (String) XposedHelpers.callStaticMethod(targetClass, <span class="string">&quot;a0&quot;</span>);</span><br><span class="line">                                sekiroResponse.success(res);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                ).start();</span><br><span class="line">        Log.e(<span class="string">&quot;zyb&quot;</span>,<span class="string">&quot;注入连接成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xposed-init"><a href="#xposed-init" class="headerlink" title="xposed_init"></a>xposed_init</h4><p>告诉XposedBridge hook入口在哪里，在app&#x2F;src&#x2F;main目录下创建assets文件夹，在assets文件夹内创建文件xposed_init, 该文件每行包含一个class的全限定名，在这里文件内容为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.testxp.HookStart</span><br></pre></td></tr></table></figure><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>如图，右上角构建完成后，如果显示 finished,就直接去文件夹找 app-debug.apk,此时一个 xposed 插件就已经开发完成了。</p><p><img src="https://p.ipic.vip/q7a734.png" alt="image-20230719200138925"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>将 插件安装到手机后看到 Logcat 输出链接成功，即可！</p><p><img src="https://p.ipic.vip/93cyen.png" alt="image-20230719201058345"></p><p>此时我们调用一下 Sekiro 接口</p><p><img src="https://p.ipic.vip/clpwig.png" alt="image-20230719201200621"></p><p>大功告成了～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
# 某查 Token Xposed+Sekiro 升级方案



&lt;h2 id=&quot;Xposed-Frida-对比&quot;&gt;&lt;a href=&quot;#Xposed-Frida-对比&quot; class=&quot;he</summary>
      
    
    
    
    <category term="逆向" scheme="http://qwd.ai/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="Android 逆向" scheme="http://qwd.ai/tags/Android-%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>某某查App 请求头Authorization 逆向</title>
    <link href="http://qwd.ai/2023/07/16/%E6%9F%90%E6%9F%90%E6%9F%A5App-%E8%AF%B7%E6%B1%82%E5%A4%B4Authorization-%E9%80%86%E5%90%91/"/>
    <id>http://qwd.ai/2023/07/16/%E6%9F%90%E6%9F%90%E6%9F%A5App-%E8%AF%B7%E6%B1%82%E5%A4%B4Authorization-%E9%80%86%E5%90%91/</id>
    <published>2023-07-16T11:38:26.000Z</published>
    <updated>2023-07-16T11:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># 某某查App 请求头Authorization 逆向<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>data参数如图，没什么好说的 手机号和密码的 Md5<br><img src="https://p.ipic.vip/xh745k.png" alt="image-20230621175205861"></p><p>请求头参数如下：</p><p><img src="https://p.ipic.vip/f22xw0.png" alt="image-20230621175124521"></p><p>看到这么多参数我眼都花了，经过一个个参数删减（拦截修改请求）测试，最终需要逆向的参数只有<strong>Authorization</strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>既然要分析参数那肯定要对 app 进行一些 hook，看看这个参数是从哪来的，怎么生成的</p><p>遇到这种情况可以直接用Java 层常见加密通杀方案过一遍，说不定就直接解决了</p><p>结果当然是没有解决，不然我也没必要写了</p><p>下面开始正常流程分析</p><h3 id="1-脱壳拿到源码"><a href="#1-脱壳拿到源码" class="headerlink" title="1. 脱壳拿到源码"></a>1. 脱壳拿到源码</h3><p>先看是什么加固方式</p><p><img src="https://p.ipic.vip/6zh72i.png" alt="image-20230716192234483"></p><p>爱加密加固，直接脱壳即可，过程不在详细说</p><h3 id="2-静态分析"><a href="#2-静态分析" class="headerlink" title="2. 静态分析"></a>2. 静态分析</h3><p>直接搜索Authorization</p><p><img src="https://p.ipic.vip/8cnifa.png" alt="image-20230716192730751"></p><p><img src="https://p.ipic.vip/lmwdq5.png" alt="image-20230716192752597"></p><p>我们直接进入 a0函数</p><p><img src="https://p.ipic.vip/bazfml.png" alt="image-20230716192819424"></p><p>使用 Frida Hook b0的两个入参</p><p>得到如下结果：</p><p>第一个参数：imei-not-exist</p><p>第二个参数：1686888384131 （时间戳）</p><p>进入 b0 函数</p><p><img src="https://p.ipic.vip/3z4ivj.png" alt="image-20230716193116362"></p><p>实际上是把一个字符串经过自写加密函数，得到最终的Authorization</p><p>进入JMEncryptBoxByRandom.encryptToBase64看看到底是什么</p><p><img src="https://p.ipic.vip/w8ao6g.png" alt="image-20230716193515988"></p><p>嗯，就是把字符串转换为字节数组然后经过一个encryptByRandomType2函数，随机打乱 字节数组，然后再 base64 即可</p><p>注意看这个encryptByRandomType2</p><p><img src="https://p.ipic.vip/812pm5.png" alt="image-20230716193557977"></p><p>native类型 说明加密逻辑在 So 层。</p><p>就不去 so 层看了，太麻烦，我们直接 hook最开始的 a0 函数即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAuthorization</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 执行 a0 得到结果</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">G3</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.tianyancha.base.utils.g3&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> res = <span class="variable constant_">G3</span>.<span class="title function_">a0</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a0 的结果是 : &#x27;</span> + res);</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">getauthorization</span>: getAuthorization</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大功告成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
# 某某查App 请求头Authorization 逆向

&lt;h2 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓包&quot; class=&quot;headerlink&quot; title=&quot;抓包&quot;&gt;&lt;/a&gt;抓包&lt;/</summary>
      
    
    
    
    <category term="逆向" scheme="http://qwd.ai/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="Android 逆向" scheme="http://qwd.ai/tags/Android-%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Iphone Mac 跨设备复制粘贴失效问题</title>
    <link href="http://qwd.ai/2023/07/16/Iphone-Mac-%E8%B7%A8%E8%AE%BE%E5%A4%87%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://qwd.ai/2023/07/16/Iphone-Mac-%E8%B7%A8%E8%AE%BE%E5%A4%87%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</id>
    <published>2023-07-16T11:03:12.000Z</published>
    <updated>2023-07-16T11:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Iphone-Mac-跨设备复制粘贴失效问题"><a href="#Iphone-Mac-跨设备复制粘贴失效问题" class="headerlink" title="Iphone Mac 跨设备复制粘贴失效问题"></a>Iphone Mac 跨设备复制粘贴失效问题</h1><ul><li>Ios 版本 16.5.1</li><li>MacOs 版本 13.4.1 (22F82)</li></ul><p>网上看到的解决方式我汇总一下</p><ol><li><p>退出 Apple ID 重新登录。</p></li><li><p>iPhone 关闭 Wi-Fi、蓝牙、接力，同时 MacBook 关闭 Wi-Fi、蓝牙、接力，两者都关机，等几十秒钟，再把两者开机，iPhone 和 MacBook 都打开 Wi-Fi、蓝牙、接力</p></li><li><p>macOS 的终端里执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update_dyld_shared_cache</span><br></pre></td></tr></table></figure></li><li><p>直接重启 iPhone 和 MacBook，不生效</p></li><li><p>在 MacBook 的「设置」→「蓝牙」里面断开 iPhone 连接并重连</p></li><li><p>有人说打开「备忘录」 App ，结束掉，再重新打开可恢复</p></li></ol><p>以上解决方式对我都没效果</p><h2 id="最终解决方式"><a href="#最终解决方式" class="headerlink" title="最终解决方式"></a>最终解决方式</h2><p>Iphone 打开热点 Mac 链接热点，然后发现跨设备拷贝粘贴神奇的好了，而且这种方式是100%好的</p><p>这个时候关闭 Iphone蜂窝网络，连接 Wifi,然后会发现 Mac 连接热点自动掉了，自动连接到了相同的 Wifi 上，此时跨设备拷贝仍然能用。</p><p>问题解决！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;Iphone-Mac-跨设备复制粘贴失效问题&quot;&gt;&lt;a href=&quot;#Iphone-Mac-跨设备复制粘贴失效问题&quot; class=&quot;headerlink&quot; title=&quot;I</summary>
      
    
    
    
    <category term="ios" scheme="http://qwd.ai/categories/ios/"/>
    
    
    <category term="系统bug" scheme="http://qwd.ai/tags/%E7%B3%BB%E7%BB%9Fbug/"/>
    
  </entry>
  
  <entry>
    <title>Insecure world writable dir /opt/homebrew/bin in PATH, mode 040777</title>
    <link href="http://qwd.ai/2023/07/06/Insecure-world-writable-dir-opt-homebrew-bin-in-PATH-mode-040777/"/>
    <id>http://qwd.ai/2023/07/06/Insecure-world-writable-dir-opt-homebrew-bin-in-PATH-mode-040777/</id>
    <published>2023-07-06T02:30:36.000Z</published>
    <updated>2023-07-06T02:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>问题</p><p>warning: Insecure world writable dir &#x2F;opt&#x2F;homebrew&#x2F;bin in PATH, mode 040777</p><p>原因分析</p><p>首先这里报错的意思是说我们这个路径下的文件sbin的文件权限是可写不安全的！文件mode是777</p><p>下面我们去终端中看下文件权限<br>Mac终端中$cd &#x2F;opt&#x2F;homebrew 然后在$ls -l查看文件权限如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxrwx   3 xxxxx  admin    96 10  9  2023 bin</span><br></pre></td></tr></table></figure><p>可以看到drwxrwxrwx的字样，这里rwx分别表示权限：读，写，执行，有三个rwx对应3种不同用户类型，第一个rwx表示所有者user权限可以读写执行这个文件，后面俩个分别表示群组group以及其他用户other<br>这里问题就出现在这里，一般这种文件的权限只对user下开放最高权限，可以修改，但是这里针对group和other用户也可以修改，这个就造成了不安全警告⚠️<br>解决方案也很简单，我们修改文件权限，删掉group和other的write权限就好了</p><p>解决办法在终端中输入以下命令<br>通过sudo命令如下，chmod表示change mode，go代表group和other，-w代表删除w权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod go-w /opt/homebrew/bin</span><br></pre></td></tr></table></figure><p>&#x2F;opt&#x2F;homebrew&#x2F;bin就是对应你警告中的dir，有的人路径不一样，注意根据自己的实际警告中的路径来代替一下命令中的路径</p><p>结果<br>我们再去检索下该文件权限，此时如下就说明已经被修改成功啦！<br>drwxr-xr-x   3 xxxxx  admin    96 10  9  2023 bin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;问题&lt;/p&gt;
&lt;p&gt;warning: Insecure world writable dir &amp;#x2F;opt&amp;#x2F;homebrew&amp;#x2F;bin in PATH, m</summary>
      
    
    
    
    
    <category term="报错" scheme="http://qwd.ai/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>Python 异步编程</title>
    <link href="http://qwd.ai/2023/06/22/Python-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>http://qwd.ai/2023/06/22/Python-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</id>
    <published>2023-06-22T04:04:49.000Z</published>
    <updated>2023-06-22T04:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="Python-异步编程"><a href="#Python-异步编程" class="headerlink" title="Python 异步编程"></a>Python 异步编程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python 异步编程是一种高效的编程方式，它利用了单线程异步、协程、事件循环等机制，以最小的资源消耗实现多任务的同时避免了并发编程带来的复杂性。在异步编程中，任务可以在同一个线程内并发执行，而不需要线程之间的切换，从而大大提高了程序的性能。</p><p>Python 中常用的异步编程库包括 <strong>asyncio</strong>、<strong>aiohttp</strong>、<strong>aiofiles</strong>、<strong>asyncpg</strong>、<strong>aiomysql</strong> 等。<strong>asyncio</strong> 是 Python 内置的异步编程库，它提供了事件循环、协程、任务等基础组件，可以方便地实现异步编程。aiohttp 是一个基于 asyncio 的 HTTP 客户端和服务器库，可以方便地实现异步网络编程。aiofiles 支持异步读写文件操作，asyncpg 和 aiomysql 用于异步访问 PostgreSQL 和 MySQL 数据库。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>Web 应用程序的并发处理：异步编程可以让 Web 服务器同时处理多个请求，在此过程中会涉及多个 I&#x2F;O 操作，如读取数据库、处理文件上传、发送电子邮件等。</li><li>网络编程：异步编程可用于编写客户端和服务器端应用程序，例如聊天应用程序。</li><li>数据分析和科学计算：当处理大量数据、模型训练和推理时，使用异步编程可以大大提高计算效率。</li><li>消息传递和事件处理：异步编程可以用于消息队列、事件传递和订阅-发布模式等应用程序，可以同时处理多个消息或事件。</li></ol><h2 id="关键词解释"><a href="#关键词解释" class="headerlink" title="关键词解释"></a>关键词解释</h2><p><strong>异步：</strong> 程序在执行过程中并不会阻塞等待结果，而是继续执行下一步操作，直到结果就绪后再回来处理。这种机制能够提升程序的效率和并发性，因为在等待某些操作的时候，程序可以同时执行其他任务。异步常被用于网络通信、文件IO等延迟较高的操作。</p><p><strong>异步IO：</strong> 一种与语言无关的编程模型，它从单线程、单进程的角度出发，采用协作多任务的方式完成异步IO操作的处理。</p><p><strong>async&#x2F;await：</strong> 两个用于定义协程的新 Python 关键字。</p><p><strong>asyncio：</strong> Python 标准库，为运行和管理协程提供了基础和 API。</p><h2 id="API-解释"><a href="#API-解释" class="headerlink" title="API 解释"></a>API 解释</h2><ol><li><strong>async</strong>：async 是 Python 中的关键字，用于声明异步函数。异步函数返回一个协程对象，协程对象可以并发执行。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">async def coroutine_func():</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ol><li><strong>await</strong>：await 关键字用于等待异步函数的执行结果。当遇到 await 关键字时，Python 会暂停该异步函数的执行，等待另一个协程的执行完成或者等待异步操作的完成。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = await func()</span><br></pre></td></tr></table></figure><ol><li><strong>asynico</strong>：asyncio 是 Python 用于异步编程的框架，提供了一组 API 用于异步 I&#x2F;O 操作的管理。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br></pre></td></tr></table></figure><ol><li><strong>gather</strong>：gather() 函数是 asyncio 中的一个 API，它可以并发执行多个协程，并返回全部的协程结果。协程的执行顺序和参数的顺序相同。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results = await asyncio.gather(*[coroutine_func1(), coroutine_func2()])</span><br></pre></td></tr></table></figure><ol><li><strong>run</strong>：run() 函数是 asyncio 模块中的一个快捷函数，用于运行异步函数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">async def main():</span><br><span class="line">    ...</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><ol><li><strong>async with</strong>：async with 语法可以用来管理异步上下文。async with 语法实现了 <strong>aenter</strong>() 和 <strong>aexit</strong>() 异步方法的对象。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">async with lock:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ol><li><strong>async for</strong>：async for 语法可以用来作为异步生成器的循环。async for 语法实现了 <strong>aiter</strong>() 和 <strong>anext</strong>() 异步方法的对象。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">async for item in async_iterator():</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ol><li><strong>asyncio.StreamReader</strong>：异步操作的流读写器类。用于从异步传输流中读取数据。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reader = asyncio.StreamReader()</span><br></pre></td></tr></table></figure><ol><li><strong>asyncio.StreamWriter</strong>：异步操作的流读写器类。用于向异步传输流中写入数据。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer = asyncio.StreamWriter()</span><br></pre></td></tr></table></figure><ol><li>**asyncio.create_task()**：创建并返回一个 Task 对象，Task 对象可以用于管理协程并发执行的状态。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task = asyncio.create_task(coroutine_func())</span><br></pre></td></tr></table></figure><ol><li>**asyncio.sleep()**：暂停当前协程的执行，等待一定时间。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await asyncio.sleep(1)</span><br></pre></td></tr></table></figure><ol><li>**asyncio.wait_for()**：等待一个异步操作的结果，并限制其最大等待时间。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = await asyncio.wait_for(coroutine_func(), timeout=1)</span><br></pre></td></tr></table></figure><ol><li>**asyncio.wait()**：并发执行多个协程，等待所有协程完成。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">done, pending = await asyncio.wait(coroutines, timeout=1, return_when=asyncio.FIRST_EXCEPTION)</span><br></pre></td></tr></table></figure><ol><li>**asyncio.ensure_future()**：创建并返回一个 Future 对象，Future 对象可以用于管理异步操作的状态。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">future = asyncio.ensure_future(coroutine_func())</span><br></pre></td></tr></table></figure><ol><li><strong>asyncio.Queue</strong>：异步操作的队列类，可以用于管理协程之间的通信。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue = asyncio.Queue()</span><br></pre></td></tr></table></figure><ol><li><strong>loop</strong>：event loop 是异步编程中最主要的对象。event loop 是用于管理协程并发执行和异步 I&#x2F;O 操作的。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><h2 id="不同版本的介绍"><a href="#不同版本的介绍" class="headerlink" title="不同版本的介绍"></a>不同版本的介绍</h2><h3 id="Python3-7-之前的版本"><a href="#Python3-7-之前的版本" class="headerlink" title="Python3.7 之前的版本"></a>Python3.7 之前的版本</h3><p>在 Python3.7 之前的版本中，需要使用以下步骤运行异步程序：</p><ol><li>获取事件循环对象：通过 <code>asyncio.get_event_loop()</code> 函数获取当前线程的事件循环对象，如果线程中不存在事件循环对象，则创建一个新的事件循环对象并返回它。</li><li>创建任务对象：通过 <code>asyncio.ensure_future()</code> 或者 <code>loop.create_task()</code> 函数创建协程对象的任务对象，并将任务对象添加到事件循环中。</li><li>运行异步程序：调用事件循环对象的 <code>loop.run_until_complete()</code> 方法来运行异步程序，直到协程对象运行完成后返回结果。</li><li>关闭事件循环对象：在异步程序运行结束后，需要调用事件循环对象的 <code>loop.close()</code> 方法来关闭事件循环对象。</li></ol><p>例如，要运行两个协程对象 <code>coro1()</code> 和 <code>coro2()</code>，可以使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro1</span>():</span><br><span class="line">    <span class="comment"># do something...</span></span><br><span class="line">    <span class="keyword">return</span> result1</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro2</span>():</span><br><span class="line">    <span class="comment"># do something...</span></span><br><span class="line">    <span class="keyword">return</span> result2</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task1 = asyncio.ensure_future(coro1())</span><br><span class="line">task2 = asyncio.ensure_future(coro2())</span><br><span class="line">results = loop.run_until_complete(asyncio.gather(task1, task2))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure><p>这种方式虽然稍微有点繁琐，但是它仍然是有效的，并且在 Python3.7 之前是常用的异步编程方式。</p><p>这个版本不再多说，因为在 3.7 之后引入了更方便更强大的 API。</p><h3 id="Python3-7-之后的版本"><a href="#Python3-7-之后的版本" class="headerlink" title="Python3.7 之后的版本"></a>Python3.7 之后的版本</h3><p>在 Python 3.7 引入的 <code>asyncio.run()</code> 函数极大地简化了 asyncio 的使用，简化了异步编程的过程，允许我们更轻松地编写异步代码。使用 <code>asyncio.run()</code> 函数，可以摆脱手动获取和关闭事件循环对象的过程，同时也提供了一些可选的参数来方便我们控制事件循环的运行。</p><p>例如，我们可以使用以下代码运行两个协程对象 <code>coro1()</code> 和 <code>coro2()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro1</span>():</span><br><span class="line">    <span class="comment"># do something...</span></span><br><span class="line">    <span class="keyword">return</span> result1</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro2</span>():</span><br><span class="line">    <span class="comment"># do something...</span></span><br><span class="line">    <span class="keyword">return</span> result2</span><br><span class="line"></span><br><span class="line">results = asyncio.run(asyncio.gather(coro1(), coro2()))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure><p>这样就非常简单和直观了，无需手动获取和关闭事件循环对象。除此之外，<code>asyncio.run()</code> 函数还支持一些可选的参数，如 <code>debug</code>、<code>shield</code>、<code>timeout</code>，这些参数能够让我们更加灵活、方便地控制异步程序的运行。</p><p>总之，<code>asyncio.run()</code> 函数让 asyncio 的使用更加简单和直观，是值得推荐的异步编程方式。</p><h3 id="强大的asyncio-gather"><a href="#强大的asyncio-gather" class="headerlink" title="强大的asyncio.gather"></a>强大的asyncio.gather</h3><p><code>asyncio.gather()</code> 函数的确提供了一种更加方便的方式来同时运行多个协程，特别是当需要在程序中同时执行多个并发任务的时候，使用 <code>asyncio.gather()</code> 函数会更加方便和高效。因为该函数可以让我们方便地指定一组协程，然后等待所有协程完成后再统一收集结果。</p><p>例如，我们可以使用以下代码运行多个协程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro1</span>():</span><br><span class="line">    <span class="comment"># do something...</span></span><br><span class="line">    <span class="keyword">return</span> result1</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro2</span>():</span><br><span class="line">    <span class="comment"># do something...</span></span><br><span class="line">    <span class="keyword">return</span> result2</span><br><span class="line"></span><br><span class="line">results = asyncio.run(asyncio.gather(coro1(), coro2()))</span><br><span class="line"><span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure><p>在 <code>asyncio.gather</code> 函数的文档中，它会返回一个协程对象，该协程对象的结果是一个列表，列表中包含了每个调用的协程对象的结果，同时这个列表的顺序与协程对象的调用顺序一致。因此在示例代码中，传入 <code>asyncio.gather</code> 函数的第一个参数是 <code>func1()</code>，第二个参数是 <code>func2()</code>，因此在 <code>results</code> 的结果中，<code>results[0]</code> 对应着 <code>func1()</code> 的返回值。</p><p>需要注意的是，当多个协程对象并发执行的时候，获取返回值的时候需要保证执行顺序一致，否则可能会出现混淆的情况。可以通过调节协程对象执行顺序或者使用协程对象返回值的标识符进行区分，从而避免混淆。</p><p>总之，对于需要同时运行多个协程的情况，使用 <code>asyncio.gather()</code> 函数能够提供一种高效灵活的方案，能够方便地并发执行多个协程并收集结果。</p><h4 id="结合-for-循环"><a href="#结合-for-循环" class="headerlink" title="结合 for 循环"></a>结合 for 循环</h4><p>使用 <code>asyncio.gather()</code> 函数和 for 循环结合起来可以方便地处理一系列相关的异步任务。下面是一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Worker <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Worker <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> done&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Result <span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        task = asyncio.create_task(worker(i))</span><br><span class="line">        tasks.append(task)</span><br><span class="line"></span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Results:&quot;</span>, results)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>这个例子中，我们定义了一个 <code>worker()</code> 协程，它是一个模拟异步任务的函数，会等待 1 秒钟然后返回一个结果。在 <code>main()</code> 函数中，我们使用 for 循环创建了 3 个协程任务对象，并将它们加入到任务列表 <code>tasks</code> 中。然后，我们使用 <code>asyncio.gather()</code> 函数将这些协程一起运行，并等待它们全部完成。最后，我们将所有协程的结果打印出来。</p><p>这个例子展示了如何使用 <code>asyncio.gather()</code> 和 for 循环一起处理一批相关的协程任务，简化了异步任务的调度和管理。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="最基础的案例"><a href="#最基础的案例" class="headerlink" title="最基础的案例"></a>最基础的案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment"># 休眠三秒后输出world</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;函数 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(func1(),func2())</span><br><span class="line">    <span class="built_in">print</span>(results)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>这段代码使用了asyncio库来进行异步编程。在程序运行时，创建了三个async函数：func1，func2和main。</p><p>func1函数中，首先输出了一个字符串”hello”，之后使用await asyncio.sleep(3)来实现3秒的延时，最后输出另一个字符串”world”。这个函数返回了一个字符串’a’。</p><p>func2函数中，只是简单地输出了一个字符串”函数2”，并返回了一个字符串’b’。</p><p>main函数中，使用了asyncio.gather()函数来并发执行func1和func2函数，并等待所有函数执行完毕。最后，输出了两个函数的返回值。</p><p>最后，使用asyncio.run()函数来启动整个异步程序。整个程序运行时，先输出”hello”，然后等待3秒，输出”world”，最后输出”函数2”和[‘a’, ‘b’]。</p><h3 id="爬虫案例"><a href="#爬虫案例" class="headerlink" title="爬虫案例"></a>爬虫案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_http</span>():</span><br><span class="line">    <span class="comment"># 声明一个支持异步的上下文管理器</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        res = <span class="keyword">await</span> session.get(<span class="string">&#x27;http://httpbin.org/delay/2&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;当前时间：<span class="subst">&#123;datetime.datetime.now()&#125;</span>, status_code = <span class="subst">&#123;res.status&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tasks = [async_http() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># Python 3.7 及以后,不需要显式声明事件循环,可以使用 asyncio.run()来代替后的启动操作</span></span><br><span class="line">asyncio.run(asyncio.wait(tasks))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;aiohttp异步耗时：<span class="subst">&#123;time.time() - start&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这段代码是利用aiohttp库实现了异步请求的效果，使用了Python的asyncio框架，其中async_http()是异步请求的函数，通过aiohttp库创建了一个异步的ClientSession对象，使用session.get()方法向指定的url发起异步请求，并返回响应结果res。最后，通过asyncio.run()来启动事件循环，等待所有的异步请求都结束，最后计算异步请求的耗时。</p><h4 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h4><p>除了get请求，aiohttp还支持其它请求类型，如POST、PUT、DELETE等，和requests使用方式类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=<span class="string">b&#x27;data&#x27;</span>)</span><br><span class="line">session.put(<span class="string">&#x27;http://httpbin.org/put&#x27;</span>, data=<span class="string">b&#x27;data&#x27;</span>)</span><br><span class="line">session.delete(<span class="string">&#x27;http://httpbin.org/delete&#x27;</span>)</span><br><span class="line">session.head(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">session.options(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">session.patch(<span class="string">&#x27;http://httpbin.org/patch&#x27;</span>, data=<span class="string">b&#x27;data&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="响应的几个方法"><a href="#响应的几个方法" class="headerlink" title="响应的几个方法"></a>响应的几个方法</h4><p>对于响应来说，我们可以用如下方法分别获取其中的响应情况。状态码、响应头、响应体、响应体二进制内容、响应体JSON结果，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># @Author  : 钢铁知识库</span></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;知识库&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>&#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.post(<span class="string">&#x27;https://www.httpbin.org/post&#x27;</span>, data=data) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;status:&#x27;</span>, response.status)  <span class="comment"># 状态码</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;headers:&#x27;</span>, response.headers)  <span class="comment"># 响应头</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;body:&#x27;</span>, <span class="keyword">await</span> response.text())  <span class="comment"># 响应体</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;bytes:&#x27;</span>, <span class="keyword">await</span> response.read())  <span class="comment"># 响应体二进制内容</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;json:&#x27;</span>, <span class="keyword">await</span> response.json())  <span class="comment"># 响应体json数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h4 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h4><p>我们可以借助<code>ClientTimeout</code>对象设置超时，例如要设置1秒的超时时间，可以这么实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># @Author  : 钢铁知识库</span></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 设置 1 秒的超时 </span></span><br><span class="line">    timeout = aiohttp.ClientTimeout(total=<span class="number">1</span>)</span><br><span class="line">    data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;知识库&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>&#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(timeout=timeout) <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;https://www.httpbin.org/delay/2&#x27;</span>, data=data) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;status:&#x27;</span>, response.status)  <span class="comment"># 状态码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">####中间省略####</span></span><br><span class="line"><span class="string">    raise asyncio.TimeoutError from None</span></span><br><span class="line"><span class="string">asyncio.exceptions.TimeoutError</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里设置了超时1秒请求延时2秒，发现抛出异常<code>asyncio.TimeoutError</code>，如果正常则响应200。</p><h4 id="并发限制"><a href="#并发限制" class="headerlink" title="并发限制"></a>并发限制</h4><p>aiohttp可以支持非常高的并发量，但面对高并发网站可能会承受不住，随时有挂掉的危险，这时需要对并发进行一些控制。现在我们借助asyncio 的Semaphore来控制并发量，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author  : 钢铁知识库</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明大并发量</span></span><br><span class="line">semaphore = asyncio.Semaphore(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_api</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> semaphore:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;scrapting...<span class="subst">&#123;datetime.now()&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># print(f&#x27;当前时间：&#123;datetime.now()&#125;, &#123;response.status&#125;&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> session</span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    tasks = [asyncio.ensure_future(get_api()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    <span class="keyword">await</span> session.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>在main方法里，我们声明了1000个task，如果没有通过Semaphore进行并发限制，那这1000放到gather方法后会被同时执行，并发量相当大。有了信号量的控制之后，同时运行的task数量就会被控制，这样就能给aiohttp限制速度了。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>这部分我会分为需求和方案两个模块，假设有异步编程需求，该给出怎么样的解决方案。</p><h3 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h3><h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>当 Web 应用程序需要处理多个请求时，通常会发生大量的 I&#x2F;O 操作，例如读取数据库或文件、发送邮件等操作。这些操作通常会占用大量的时间，如果在每个请求中都同步执行它们，将会严重影响响应时间和服务器的性能，如何解决呢？</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>asyncio.start_server 是 asyncio 标准库提供的一个函数，是用于创建一个异步 TCP 服务器的工具方法。该函数的原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asyncio.start_server(client_connected_cb, host=<span class="literal">None</span>, port=<span class="literal">None</span>, *,</span><br><span class="line">                     loop=<span class="literal">None</span>, family=socket.AF_UNSPEC, flags=socket.AI_PASSIVE, sock=<span class="literal">None</span>, backlog=<span class="number">100</span>, ssl=<span class="literal">None</span>, server_hostname=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li><code>client_connected_cb</code>: 当有新的客户端连接时，会调用此回调函数。</li><li><code>host</code>: 监听的 IP 地址，默认为 None，表示监听所有可用的地址。</li><li><code>port</code>: 监听的端口号。</li><li><code>loop</code>: 事件循环，用于异步处理客户端请求。</li><li><code>family</code>: 指定要使用的地址族，默认为 <code>socket.AF_UNSPEC</code>，表示同时兼容 IPv4 和 IPv6。</li><li><code>flags</code>: 指定 <code>getaddrinfo()</code> 函数的标志，默认为 <code>socket.AI_PASSIVE</code>，表示从所有网络接口获取信息。</li><li><code>sock</code>: 指定要使用的套接字对象，如果指定了该参数，则不能同时指定 host 和 port。</li><li><code>backlog</code>: 最大等待连接的数量。</li><li><code>ssl</code>, <code>server_hostname</code>: 如果要使用 SSL 安全传输协议，则可以指定 SSLContext 对象和服务器的主机名。</li></ul><p>使用 asyncio.start_server，我们可以方便地创建一个 TCP 服务器，用于处理客户端的请求。在上面的示例代码中，我们使用 start_server 创建了一个异步 Web 服务器，监听本地的 8080 端口，当有客户端连接时，会调用 handle_request 函数进行异步处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">reader, writer</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;异步处理请求&quot;&quot;&quot;</span></span><br><span class="line">    data = <span class="keyword">await</span> reader.read(<span class="number">1024</span>)</span><br><span class="line">    message = data.decode()</span><br><span class="line">    addr = writer.get_extra_info(<span class="string">&#x27;peername&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received <span class="subst">&#123;message!r&#125;</span> from <span class="subst">&#123;addr!r&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟较长时间的 I/O 操作</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    response = <span class="string">f&quot;Hello, <span class="subst">&#123;message&#125;</span>!&quot;</span></span><br><span class="line">    writer.write(response.encode())</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;启动服务器&quot;&quot;&quot;</span></span><br><span class="line">    server = <span class="keyword">await</span> asyncio.start_server(</span><br><span class="line">        handle_request, <span class="string">&#x27;localhost&#x27;</span>, <span class="number">8080</span>)</span><br><span class="line">    addr = server.sockets[<span class="number">0</span>].getsockname()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Serving on <span class="subst">&#123;addr&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> server:</span><br><span class="line">        <span class="keyword">await</span> server.serve_forever()</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>该示例代码实现了一个简单的异步 Web 服务器。在 handle_request 函数中，我们先通过 await reader.read(1024) 从客户端读取数据，然后使用 await asyncio.sleep(1) 模拟了一个长时间的 I&#x2F;O 操作（1 秒钟），最后通过 writer 写入响应数据，并运行 await writer.drain() 将数据异步地发送到客户端。在 main 函数中，我们通过 await asyncio.start_server 启动了服务器，并调用 await server.serve_forever() 不断监听客户端的连接，从而实现了异步处理多个请求的功能。</p><p>当我们向该服务器发送多个请求时，可以看到服务器会同时接收多个请求并异步地处理它们，而不会阻塞其他请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; telnet localhost 8080</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">Hello, World!</span><br><span class="line">Hello, World!Hello, World!</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>总之，使用 asyncio 实现异步编程可以轻松地实现高效的并发处理，提高服务器的性能和响应速度。</p><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求 2"></a>需求 2</h3><h4 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h4><p>假设公司的数据中心需要下载非常大的数据集，但下载速度受到带宽和网络等因素的限制，下载一个数据集可能需要数小时甚至数天的时间。而数据中心需要同时下载多个数据集，因此需要一个可以同时下载多个文件的多任务下载工具。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用异步 IO 技术可以达到高效的下载效果，因为在下载一个数据集的过程中，可以同时启动并发的下载任务，遇到 IO 阻塞时，自动切换到其他任务，从而实现了不阻塞其他任务的目的。</p><p>实现思路如下：</p><ol><li>创建一个任务队列，用于存放需要下载的文件列表。</li><li>创建一个下载任务的协程，从队列中获取要下载的文件，使用 aiohttp 库中的 <code>aiohttp.ClientSession</code> 类发送异步的 GET 请求下载文件，并保存到本地的文件中。</li><li>创建多个下载任务的协程，使用 <code>asyncio.gather</code> 函数并发执行多个下载任务。</li><li>为了避免下载时 IO 阻塞，使用异步 IO 技术，将每个下载操作封装为一个协程，使用异步 IO 库 asyncio 进行并发控制。</li></ol><p>下面是该场景的代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载任务协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">url: <span class="built_in">str</span>, file_name: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    chunk = <span class="keyword">await</span> response.content.read(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    f.write(chunk)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多任务下载函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">multi_download</span>(<span class="params">urls: <span class="built_in">list</span>, dir_path: <span class="built_in">str</span></span>):</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        file_name = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        file_path = dir_path + file_name</span><br><span class="line">        task = asyncio.create_task(download_file(url, file_path))</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&#x27;https://www.example.com/file1.zip&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.example.com/file2.zip&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.example.com/file3.zip&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.example.com/file4.zip&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dir_path = <span class="string">&#x27;/tmp/downloads/&#x27;</span></span><br><span class="line"></span><br><span class="line">asyncio.run(multi_download(urls, dir_path))</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用 async&#x2F;await 语法定义了两个协程函数：download_file 和 multi_download，其中 download_file 用于下载单个文件，multi_download 用于同时下载多个文件。在 multi_download 中我们使用 asyncio.gather 函数并发执行多个下载任务。在下载任务中，我们使用 aiohttp 库来发送 HTTP 请求，并使用异步 IO 技术来避免 IO 阻塞。</p><h3 id="需求-3"><a href="#需求-3" class="headerlink" title="需求 3"></a>需求 3</h3><h4 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h4><p>当前需要开发一款爬虫系统，这个系统需要能够实时获取多个网站的数据，并且需要进行数据清洗和处理，以便进行数据挖掘和分析。由于数据量比较大，因此系统需要具备高并发和高性能的特点，能够快速响应市场变化，并且能够及时地进行数据清洗和处理。</p><p>可以使用异步编程框架，如Asyncio和Tornado等，来实现该爬虫需求。通过异步框架，需要编写高效的异步爬虫程序，同时还可以利用该框架提供的协程和异步IO等功能，提升系统性能，并更好地应对高并发和高性能的要求。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>1.选择异步编程框架：选择一个适合您项目的异步编程框架，这里我们以Asyncio作为框架示例。Asyncio是一个基于协程的异步框架，可以很好地应对高并发的需求。</p><p>2.使用异步HTTP库：从多个网站获取数据需要使用异步HTTP库，而对于Asyncio来说，aiohttp 库是一个不错的选择，它提供了异步 HTTP 客户端和服务器的支持。</p><p>3.数据清洗和处理：获取到数据后进行数据清洗和处理，以便进行下一步的分析。使用Python数据处理库如Pandas、NumPy、SciPy来处理数据。</p><p>4.部署到生产环境：将开发的爬虫系统部署到生产环境中，可以使用Docker或Kubernetes等容器化技术进行部署。</p><p>5.性能优化：优化系统性能和响应速度，可以使用多线程、多进程、Redis等技术来进行优化。</p><p>6.监控和日志：监控和记录系统的运行状况和日志，可以使用钉钉、ELK等工具来进行监控和日志管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;Python-异步编程&quot;&gt;&lt;a href=&quot;#Python-异步编程&quot; class=&quot;headerlink&quot; title=&quot;Python 异步编程&quot;&gt;&lt;/a&gt;Python</summary>
      
    
    
    
    <category term="异步" scheme="http://qwd.ai/categories/%E5%BC%82%E6%AD%A5/"/>
    
    
    <category term="Python" scheme="http://qwd.ai/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java层常见加密Hook通杀方案</title>
    <link href="http://qwd.ai/2023/06/21/Java%E5%B1%82%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86Hook%E9%80%9A%E6%9D%80%E6%96%B9%E6%A1%88/"/>
    <id>http://qwd.ai/2023/06/21/Java%E5%B1%82%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86Hook%E9%80%9A%E6%9D%80%E6%96%B9%E6%A1%88/</id>
    <published>2023-06-21T10:56:43.000Z</published>
    <updated>2023-06-21T10:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># Java 层 常见加密 Hook 通杀方案<p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">N_ENCRYPT_MODE</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">N_DECRYPT_MODE</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> ins = <span class="title class_">Exception</span>.$new(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> straces = ins.<span class="title function_">getStackTrace</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">undefined</span> == straces || <span class="literal">null</span> == straces) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;============================= Stack strat=======================&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; straces.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;   &quot;</span> + straces[i].<span class="title function_">toString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;============================= Stack end=======================\r\n&quot;</span>);</span><br><span class="line">    <span class="title class_">Exception</span>.$dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工具相关函数</span></span><br><span class="line"><span class="keyword">var</span> base64EncodeChars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>,</span><br><span class="line">    base64DecodeChars = <span class="keyword">new</span> <span class="title class_">Array</span>((-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">62</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">63</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToBase64</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.<span class="property">length</span>, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e.<span class="title function_">charCodeAt</span>(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e.<span class="title function_">charCodeAt</span>(a++),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64ToString</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.<span class="property">length</span>, o = <span class="number">0</span>, d = <span class="string">&#x27;&#x27;</span>; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hexToBase64</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">base64Encode</span>(<span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, str.<span class="title function_">replace</span>(<span class="regexp">/\r|\n/g</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/([\da-fA-F]&#123;2&#125;) ?/g</span>, <span class="string">&quot;0x$1 &quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/ +$/</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64ToHex</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, bin = <span class="title function_">base64Decode</span>(str.<span class="title function_">replace</span>(<span class="regexp">/[ \r\n]+$/</span>, <span class="string">&quot;&quot;</span>)), hex = []; i &lt; bin.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = bin.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp.<span class="property">length</span> === <span class="number">1</span>)</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        hex[hex.<span class="property">length</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hexToBytes</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> hexA = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = str.<span class="title function_">substr</span>(pos, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">parseInt</span>(s, <span class="number">16</span>);</span><br><span class="line">        hexA.<span class="title function_">push</span>(v);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToHex</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> k, j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        k = arr[i];</span><br><span class="line">        j = k;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = k + <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; <span class="number">16</span>) &#123;</span><br><span class="line">            str += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str += j.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToHex</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            val = str.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val += str.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stringToBytes</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ch, st, re = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        ch = str.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">        st = [];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            st.<span class="title function_">push</span>(ch &amp; <span class="number">0xFF</span>);</span><br><span class="line">            ch = ch &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ch);</span><br><span class="line">        re = re.<span class="title function_">concat</span>(st.<span class="title function_">reverse</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将byte[]转成String的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToString</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        str += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bytesToBase64</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.<span class="property">length</span>, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e[a++],</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.<span class="title function_">charAt</span>(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">base64ToBytes</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.<span class="property">length</span>, o = <span class="number">0</span>, d = []; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.<span class="title function_">push</span>(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.<span class="title function_">push</span>((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.<span class="title function_">charCodeAt</span>(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.<span class="title function_">push</span>((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stringToBase64 stringToHex stringToBytes</span></span><br><span class="line"><span class="comment">//base64ToString base64ToHex base64ToBytes</span></span><br><span class="line"><span class="comment">//               hexToBase64  hexToBytes</span></span><br><span class="line"><span class="comment">// bytesToBase64 bytesToHex bytesToString</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> secretKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.SecretKeySpec&#x27;</span>);</span><br><span class="line">    secretKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES算法名：&quot;</span> + b + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES算法名：&quot;</span> + b + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES算法名：&quot;</span> + b + <span class="string">&quot;|base64**:&quot;</span> + <span class="title function_">bytesToBase64</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// hook 所有的输出</span></span><br><span class="line">    <span class="keyword">var</span> secretKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.SecretKeySpec&#x27;</span>);</span><br><span class="line">    secretKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">        <span class="comment">// showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b, c, d);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES算法名：&quot;</span> + d + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES算法名：&quot;</span> + d + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="comment">// 再输出个 base64</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES算法名：&quot;</span> + d + <span class="string">&quot;|base64**:&quot;</span> + <span class="title function_">bytesToBase64</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// hook 加密结果输出</span></span><br><span class="line">    <span class="keyword">var</span> cipher = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>);</span><br><span class="line">    cipher.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES加密结果：&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="comment">// 再输出个 base64</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AES加密结果base64：&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">DESKeySpec</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.DESKeySpec&#x27;</span>);</span><br><span class="line">    <span class="title class_">DESKeySpec</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="variable language_">this</span>.<span class="title function_">getKey</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des**  |str &quot;</span> + <span class="title function_">bytesToString</span>(bytes_key_des));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des**  |hex &quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key_des));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">DESKeySpec</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="variable language_">this</span>.<span class="title function_">getKey</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des**  |str &quot;</span> + <span class="title function_">bytesToString</span>(bytes_key_des));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des**  |hex &quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key_des));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Mac&#x27;</span>);</span><br><span class="line">    mac.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a))</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |str  :&quot;</span> + <span class="title function_">bytesToString</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |hex  :&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |base64  :&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal参数: |str  :&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal参数: |hex  :&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |str  :&quot;</span> + <span class="title function_">bytesToString</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |hex  :&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |base64  :&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> md = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.MessageDigest&#x27;</span>);</span><br><span class="line">    md.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a))</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">digest</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest结果 |hex:&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest结果 |base64:&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">digest</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest参数 |str:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest参数 |hex:&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest结果: |hex&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest结果: |base64&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ivParameterSpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.IvParameterSpec&#x27;</span>);</span><br><span class="line">    ivParameterSpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;iv向量: |str:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;iv向量: |hex:&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cipher = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>);</span><br><span class="line">    cipher.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;模式填充:&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str**:&quot;</span> + <span class="title function_">bytesToString</span>(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex**:&quot;</span> + <span class="title function_">bytesToHex</span>(bytes_key));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cipher.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title function_">bytesToString</span>(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |str  :&quot;</span> + <span class="title function_">bytesToString</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |hex  :&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |base64  :&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal参数: |str  :&quot;</span> + <span class="title function_">bytesToString</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal参数: |hex  :&quot;</span> + <span class="title function_">bytesToHex</span>(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |str  :&quot;</span> + <span class="title function_">bytesToString</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |hex  :&quot;</span> + <span class="title function_">bytesToHex</span>(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |base64  :&quot;</span> + <span class="title function_">bytesToBase64</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> x509EncodedKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.spec.X509EncodedKeySpec&#x27;</span>);</span><br><span class="line">    x509EncodedKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RSA**:&quot;</span> + <span class="title function_">bytesToBase64</span>(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rSAPublicKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.spec.RSAPublicKeySpec&#x27;</span>);</span><br><span class="line">    rSAPublicKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.math.BigInteger&#x27;</span>, <span class="string">&#x27;java.math.BigInteger&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//console.log(&quot;RSA**:&quot; + bytesToBase64(a));</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RSA**N:&quot;</span> + a.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RSA**E:&quot;</span> + b.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">KeyPairGenerator</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.KeyPairGenerator&#x27;</span>);</span><br><span class="line">    <span class="title class_">KeyPairGenerator</span>.<span class="property">generateKeyPair</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">generateKeyPair</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str_private = result.<span class="title function_">getPrivate</span>().<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="keyword">var</span> str_public = result.<span class="title function_">getPublic</span>().<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;公钥  |hex&quot;</span> + <span class="title function_">bytesToHex</span>(str_public));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;私钥  |hex&quot;</span> + <span class="title function_">bytesToHex</span>(str_private));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">KeyPairGenerator</span>.<span class="property">genKeyPair</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//showStacks();</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">genKeyPair</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str_private = result.<span class="title function_">getPrivate</span>().<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="keyword">var</span> str_public = result.<span class="title function_">getPublic</span>().<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;公钥  |hex&quot;</span> + <span class="title function_">bytesToHex</span>(str_public));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;私钥  |hex&quot;</span> + <span class="title function_">bytesToHex</span>(str_private));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
# Java 层 常见加密 Hook 通杀方案

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="笔记" scheme="http://qwd.ai/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Frida" scheme="http://qwd.ai/tags/Frida/"/>
    
  </entry>
  
  <entry>
    <title>Frida-Python</title>
    <link href="http://qwd.ai/2023/06/21/Frida-Python/"/>
    <id>http://qwd.ai/2023/06/21/Frida-Python/</id>
    <published>2023-06-21T10:40:45.000Z</published>
    <updated>2023-06-21T10:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># Frida-Python<h2 id="启动-Frida-服务"><a href="#启动-Frida-服务" class="headerlink" title="启动 Frida 服务"></a>启动 Frida 服务</h2><h3 id="包名附加"><a href="#包名附加" class="headerlink" title="包名附加"></a>包名附加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot; ...... &quot;&quot;&quot;</span></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">&#x27;com.dodonew.online&#x27;</span>)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h3 id="pid-附加"><a href="#pid-附加" class="headerlink" title="pid 附加"></a>pid 附加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process = frida.get_usb_device().attach(<span class="number">1234</span>) <span class="comment"># 1234 pid</span></span><br></pre></td></tr></table></figure><h3 id="spawn-方式启动"><a href="#spawn-方式启动" class="headerlink" title="spawn 方式启动"></a>spawn 方式启动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.tianyancha.skyeye&quot;</span>])    <span class="comment"># 以挂起方式创建进程</span></span><br><span class="line">process = device.attach(pid)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line">device.resume(pid)  <span class="comment"># 加载完脚本, 恢复进程运行</span></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h3 id="连接非标准端口"><a href="#连接非标准端口" class="headerlink" title="连接非标准端口"></a>连接非标准端口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process = frida.get_device_manager().add_remote_device(<span class="string">&#x27;192.168.3.68:8888&#x27;</span>).attach(<span class="string">&#x27;com.dodonew.online&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="连接多个设备"><a href="#连接多个设备" class="headerlink" title="连接多个设备"></a>连接多个设备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">process = frida.get_device_manager().add_remote_device(<span class="string">&#x27;192.168.3.68:8888&#x27;</span>).attach(<span class="string">&#x27;com.dodonew.online&#x27;</span>)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line">process1 = frida.get_device_manager().add_remote_device(<span class="string">&#x27;192.168.3.69:8888&#x27;</span>).attach(<span class="string">&#x27;com.dodonew.online&#x27;</span>)</span><br><span class="line">script1 = process.create_script(jsCode)</span><br><span class="line">script1.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h2 id="frida-与-Python-的交互"><a href="#frida-与-Python-的交互" class="headerlink" title="frida 与 Python 的交互"></a>frida 与 Python 的交互</h2><figure class="highlight python"><figcaption><span>&#123;7-12,17&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onMessage</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="comment"># print(message)</span></span><br><span class="line">    <span class="comment"># &#123;&#x27;type&#x27;: &#x27;send&#x27;, &#x27;payload&#x27;:&#x27;some strings&#x27;&#125;</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">u&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">&#x27;com.dodonew.online&#x27;</span>)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, onMessage)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>在 jscode 中可以使用<code>send(data)</code>，将数据传入到 onMessage 回调函数中处理。</p><h3 id="recv-与-script-post"><a href="#recv-与-script-post" class="headerlink" title="recv 与 script.post"></a>recv 与 script.post</h3><p>在 js 端中可以通过 send 向 python 发送数据，而 python 要向 js 发送数据则需要使用 script.post，js 中使用 recv 来接收，演示代码如下</p><figure class="highlight python"><figcaption><span>&#123;8-11,23-24&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">        var Utils = Java.use(&#x27;com.dodonew.online.util.Utils&#x27;);</span></span><br><span class="line"><span class="string">        Utils.md5.implementation = function(a)&#123;</span></span><br><span class="line"><span class="string">            console.log(&#x27;MD5 string: &#x27;, a);</span></span><br><span class="line"><span class="string">            var retval = this.md5(a);</span></span><br><span class="line"><span class="string">            send(retval);</span></span><br><span class="line"><span class="string">            recv(function(obj)&#123;</span></span><br><span class="line"><span class="string">                console.log(JSON.stringify(obj));</span></span><br><span class="line"><span class="string">                retval = obj.data;</span></span><br><span class="line"><span class="string">            &#125;).wait();</span></span><br><span class="line"><span class="string">            return retval;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onMessage</span>(<span class="params">message, data</span>):</span><br><span class="line">   <span class="built_in">print</span>(message)</span><br><span class="line">   <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">u&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">       time.sleep(<span class="number">10</span>)</span><br><span class="line">       script.post(&#123;<span class="string">&quot;data&quot;</span>: <span class="string">&quot;a123456&quot;</span>&#125;)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h2 id="算法转发"><a href="#算法转发" class="headerlink" title="算法转发"></a>算法转发</h2><h3 id="rpc-exports-与-script-exports"><a href="#rpc-exports-与-script-exports" class="headerlink" title="rpc.exports 与 script.exports"></a>rpc.exports 与 script.exports</h3><p>js 端：<code>rpc.exports = &#123; func: func&#125;</code></p><p>python 端：<code>script.exports.func()/script.exports.FUNC()</code></p><p>注: 如果 js 导出函数中包含驼峰命名，则 python 需要将大写替换成_小写，如 getUser &#x3D;&gt; get_user</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function md5(data)&#123;</span></span><br><span class="line"><span class="string">        var result = &quot;&quot;;</span></span><br><span class="line"><span class="string">        Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">            result = Java.use(&#x27;com.dodonew.online.util.Utils&#x27;).md5(data);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return result;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    rpc.exports = &#123;</span></span><br><span class="line"><span class="string">        md5: md5</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = script.exports.md5(<span class="string">&#x27;a123456&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="使用-flask-搭建接口"><a href="#使用-flask-搭建接口" class="headerlink" title="使用 flask 搭建接口"></a>使用 flask 搭建接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jsCode = <span class="built_in">open</span>(<span class="string">&#x27;hookAuthorization.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(jsCode)</span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.tianyancha.skyeye&quot;</span>])</span><br><span class="line">process = device.attach(pid)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line"><span class="built_in">print</span>(script)</span><br><span class="line">script.load()</span><br><span class="line">device.resume(pid)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getAuthorization&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAuthorization</span>():</span><br><span class="line">    res = script.exports.getAuthorization()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">3388</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>http 发送 get 请求 如 <a href="http://127.0.0.1:5000/getAuthorization%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%BE%97%E5%88%B0%E7%BB%93%E6%9E%9C%EF%BC%8Cpost%E8%AF%B7%E6%B1%82%E5%90%8C%E7%90%86">http://127.0.0.1:5000/getAuthorization，即可得到结果，post请求同理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
# Frida-Python

&lt;h2 id=&quot;启动-Frida-服务&quot;&gt;&lt;a href=&quot;#启动-Frida-服务&quot; class=&quot;headerlink&quot; title=&quot;启动 Frida</summary>
      
    
    
    
    <category term="笔记" scheme="http://qwd.ai/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Fida" scheme="http://qwd.ai/tags/Fida/"/>
    
  </entry>
  
  <entry>
    <title>Frida基础</title>
    <link href="http://qwd.ai/2023/06/21/Frida%E5%9F%BA%E7%A1%80/"/>
    <id>http://qwd.ai/2023/06/21/Frida%E5%9F%BA%E7%A1%80/</id>
    <published>2023-06-21T10:12:09.000Z</published>
    <updated>2023-06-21T10:12:09.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/># Frida 基础<h2 id="虚拟环境安装"><a href="#虚拟环境安装" class="headerlink" title="虚拟环境安装"></a>虚拟环境安装</h2><p>给 frida一个纯净的 Python 环境</p><h3 id="conda-创建虚拟环境"><a href="#conda-创建虚拟环境" class="headerlink" title="conda 创建虚拟环境"></a>conda 创建虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n frida python=3.8 </span><br></pre></td></tr></table></figure><h3 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate frida</span><br></pre></td></tr></table></figure><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name frida --all</span><br></pre></td></tr></table></figure><h2 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h2><p>github 地址： <a href="https://github.com/frida/frida">frida</a></p><p>官方文档 <a href="https://frida.re/docs/home/">https://frida.re/docs/home/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools  <span class="comment"># 会自动帮你下载Frida 最新版</span></span><br></pre></td></tr></table></figure><h4 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida==版本号</span><br></pre></td></tr></table></figure><p>因为 一个 frida-tools 会对应多个 frida 版，所以安装指定版本不能直接安装最新版，需查看对应版本号</p><p>访问 <a href="https://github.com/frida/frida/releases/tag/">https://github.com/frida/frida/releases/tag/</a> + frida 版本号，找到 python3-frida-tools-版本号，即 frida-tools 版本号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools==版本号</span><br></pre></td></tr></table></figure><h4 id="查看版本号，验证是否安装成功"><a href="#查看版本号，验证是否安装成功" class="headerlink" title="查看版本号，验证是否安装成功"></a>查看版本号，验证是否安装成功</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida --v</span><br></pre></td></tr></table></figure><h4 id="frida-代码提示"><a href="#frida-代码提示" class="headerlink" title="frida 代码提示"></a>frida 代码提示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @types/frida-gum</span><br></pre></td></tr></table></figure><h3 id="frida-版本与-Android-版本与-Python-版本"><a href="#frida-版本与-Android-版本与-Python-版本" class="headerlink" title="frida 版本与 Android 版本与 Python 版本"></a>frida 版本与 Android 版本与 Python 版本</h3><table><thead><tr><th>frida</th><th>Android</th><th>Python</th></tr></thead><tbody><tr><td>12.3.6</td><td>5-6</td><td>3.7</td></tr><tr><td>12.8.0</td><td>7-8</td><td>3.8</td></tr><tr><td>14+</td><td>9+</td><td>3.8</td></tr></tbody></table><h3 id="fridaserver"><a href="#fridaserver" class="headerlink" title="fridaserver"></a>fridaserver</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>fridaserver 与 frida 版本需要匹配，和 frida-tools 一样，访问 <a href="https://github.com/frida/frida/releases/tag/">https://github.com/frida/frida/releases/tag/</a> + frida 版本号，可以找到对应的 fridaserver 版本。</p><p>文件名的格式为：<code>frida-server-(version)-(platform)-(cpu).xz</code>，需要下载的安卓的也就是<code>frida-server-15.1.14-android-arm64.xz</code>， <strong>解压后</strong>将文件 push 到手机内<code>/data/local/tmp/</code>下，并重命名 fsarm64</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb push C:\Users\kuizuo\Desktop\frida-server-15.1.14-android-arm64 /data/local/tmp/fsarm64</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="built_in">cd</span> data/local/tmp</span><br><span class="line"><span class="built_in">chmod</span> 777 fsarm64</span><br><span class="line"></span><br><span class="line">./fsarm64</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMD 手机端</span></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">./data/local/tmp/fsarm64 <span class="comment"># 启动fs服务</span></span><br><span class="line"><span class="comment"># 可添加参数 -l 0.0.0.0:9000 指定端口为9000(默认27042),用于frida -H连接多个设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD 电脑端</span></span><br><span class="line">conda activate frida <span class="comment">#进入frida环境</span></span><br><span class="line">frida -H -U -l hook.js</span><br></pre></td></tr></table></figure><p><strong>新版本 fridaserver 无需端口转发</strong>，旧版可能还需要新开一个 CMD 窗口执行<code>adb forward tcp:27042 tcp:27042</code></p><h2 id="Frida-命令"><a href="#Frida-命令" class="headerlink" title="Frida 命令"></a>Frida 命令</h2><p>Hook 前提: 在 hook 时，要保证参数类型执行流程与原代码保持一致，必要的调用与结果返回不可省略，否则将有可能导致程序崩溃。</p><p><code>frida -help</code> 查看帮助，常用选项如下</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-U,–usb</td><td>连接 USB 设备</td></tr><tr><td>-F, –attach-frontmost</td><td>app 最前显示的应用</td></tr><tr><td>-H HOST, –host&#x3D;HOST</td><td>通过端口连接 frida-server 默认监听 局域网 ip:27042</td></tr><tr><td>-f FILE, –file&#x3D;FILE spawn FILE</td><td>以包名方式，自动启动 app 用%resume 恢复主线程</td></tr><tr><td>-l SCRIPT, –load&#x3D;SCRIPT</td><td>以 js 脚本方式注入</td></tr><tr><td>-n NAME, –attach-name&#x3D;NAME</td><td>以包名附加</td></tr><tr><td>-p PID, –attach-pid&#x3D;PID</td><td>以 PID 附加</td></tr><tr><td>-o LOGFILE, –output&#x3D;LOGFILE</td><td>将结果输出到文件上</td></tr><tr><td>–debug</td><td>附加到 Node.js 进行调试</td></tr><tr><td>–no-pause</td><td>启动后，自动运行主线程 可省略%resume</td></tr></tbody></table><h3 id="简单-Hook-脚本演示"><a href="#简单-Hook-脚本演示" class="headerlink" title="简单 Hook 脚本演示"></a>简单 Hook 脚本演示</h3><p><strong>注：Frida 老版本不支持 es6 语法。</strong></p><p>代码如下</p><figure class="highlight js"><figcaption><span>title</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java层的代码 都需要在perform下执行</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Java.use()   // 选择对应的类名 返回实例化的对象  可直接调用类下方法(反编译后查看)</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Util</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.dodonew.online.util.Utils&#x27;</span>)</span><br><span class="line">  <span class="comment">// 调用类下的md5方法 同时实现方法改为新函数</span></span><br><span class="line">  <span class="title class_">Util</span>.<span class="property">md5</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a: &#x27;</span>, a)</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="variable language_">this</span>.<span class="title function_">md5</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ret: &#x27;</span>, ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行 <code>frida -U -F -l hook.js</code>，触发 hook 的函数，便可打印出参。</p><h3 id="获取类"><a href="#获取类" class="headerlink" title="获取类"></a>获取类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java.use(类名)</span></span><br><span class="line"><span class="keyword">let</span> J_String = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HashMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.HashMap&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Utils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.kuizuo.app.Utils&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="静态方法与实例方法"><a href="#静态方法与实例方法" class="headerlink" title="静态方法与实例方法"></a>静态方法与实例方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">类.方法.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.方法()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有返回值则需要将返回值返回</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Util</span>.<span class="property">md5</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a: &#x27;</span>, a)</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title function_">md5</span>(a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ret: &#x27;</span>, ret)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HashMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.HashMap&#x27;</span>)</span><br><span class="line"><span class="title class_">HashMap</span>.<span class="property">put</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">key</span>: key.<span class="title function_">toString</span>(), <span class="attr">value</span>: value.<span class="title function_">toString</span>() &#125;))</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title function_">put</span>(key, value) <span class="comment">// 如果不修改的话，则需要原封不动的传入。</span></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载方法"><a href="#重载方法" class="headerlink" title="重载方法"></a>重载方法</h3><p>如果方法有重载，需要使用<code>.overload(&#39;java.lang.String&#39;)</code> 给定参数个数与类型，如果有重载，但是不使用 overload，frida 将会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Util</span>.<span class="property">test</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title function_">test</span>(a)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Util</span>.<span class="property">test</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title function_">test</span>(a)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hook-所有重载方法"><a href="#hook-所有重载方法" class="headerlink" title="hook 所有重载方法"></a>hook 所有重载方法</h4><p>像上述两个重载方法，就需要编写两份代码，如果重载方法过多，代码不能很好的复用，就可以使用获取类下的所有重载方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">类.方法.<span class="property">overloads</span> <span class="comment">// 返回所有重载方法,依次为每个成员实现implementation方法即可hook多个重载方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> overloads = <span class="title class_">RequestUtil</span>.<span class="property">encodeDesMap</span>.<span class="property">overloads</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> overload <span class="keyword">of</span> overloads) &#123;</span><br><span class="line">  overload.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(Array.from(arguments));</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="variable language_">arguments</span>])</span><br><span class="line">    <span class="comment">// 两者都是打印参数，将类数组转真实数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">encodeDesMap</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$init()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类.$new() <span class="comment">// 等同于 new 类()</span></span><br></pre></td></tr></table></figure><h3 id="主动调用类方法"><a href="#主动调用类方法" class="headerlink" title="主动调用类方法"></a>主动调用类方法</h3><p><strong>以下的“类”，是通过<code>Java.use()</code>返回的值。</strong></p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类.方法()</span><br></pre></td></tr></table></figure><h4 id="实例方法-实例化对象"><a href="#实例方法-实例化对象" class="headerlink" title="实例方法 实例化对象"></a>实例方法 实例化对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = 类.$new()</span><br><span class="line">obj.方法()</span><br></pre></td></tr></table></figure><h4 id="实例方法-获取已有对象-Java-choose"><a href="#实例方法-获取已有对象-Java-choose" class="headerlink" title="实例方法 获取已有对象(Java.choose)"></a>实例方法 获取已有对象(Java.choose)</h4><p>内存中遍历，找到<strong>所有</strong>符合条件的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;类路径&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    obj.方法()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;内存中的对象搜索完毕&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样调用不优雅，会陷入回调地狱，所以可以封装成一个外部函数，来调用。（留个伏笔 TODO…）</p><h3 id="修改函数参数与返回值"><a href="#修改函数参数与返回值" class="headerlink" title="修改函数参数与返回值"></a>修改函数参数与返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Utils</span>.<span class="property">md5</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="string">&#x27;随便设置的参数值&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="title function_">md5</span>(b) <span class="comment">// 直接修改成b</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;随便设置的返回值&#x27;</span> <span class="comment">// frida会将字符串包装成java的String对象。</span></span><br><span class="line">  <span class="comment">// return J_String.$new(&quot;随便设置的返回值&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取与修改类字段-成员变量"><a href="#获取与修改类字段-成员变量" class="headerlink" title="获取与修改类字段(成员变量)"></a>获取与修改类字段(成员变量)</h3><h4 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类.字段.<span class="property">value</span> <span class="comment">// 获取类的属性值</span></span><br><span class="line">类.字段.<span class="property">value</span> = <span class="string">&#x27;新的值&#x27;</span> <span class="comment">// 修改类的值</span></span><br></pre></td></tr></table></figure><h4 id="实例字段-实例化对象"><a href="#实例字段-实例化对象" class="headerlink" title="实例字段 实例化对象"></a>实例字段 实例化对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = 类.$new()</span><br><span class="line">obj.字段.<span class="property">value</span></span><br></pre></td></tr></table></figure><h4 id="实例字段-获取已有对象-Java-choose"><a href="#实例字段-获取已有对象-Java-choose" class="headerlink" title="实例字段 获取已有对象(Java.choose)"></a>实例字段 获取已有对象(Java.choose)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;类路径&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.字段.<span class="property">value</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>:::tip</p><p><strong>注: 如果字段名与方法名一样，则需要给字段名前加下划线_，否则获取到的是方法</strong></p><p>:::</p><h3 id="内部类与匿名类"><a href="#内部类与匿名类" class="headerlink" title="内部类与匿名类"></a>内部类与匿名类</h3><p>内部类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 外部类$内部类 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;外部类$内部类&#x27;</span>) <span class="comment">// 变量命名随意</span></span><br><span class="line"><span class="keyword">const</span> 外部类$1 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;外部类$1&#x27;</span>) <span class="comment">// 获取第一个内部类</span></span><br></pre></td></tr></table></figure><p>匿名类</p><p>匿名类是根据内存生成，没有具体的内部类名，通过 smali 代码来判断，获取到的可能像下面这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $1 = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;包名.MainActivity$1&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;枚举类&quot;</span> &#123;</span><br><span class="line">    <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">ordinal</span>()); <span class="comment">// 输出枚举的键</span></span><br><span class="line">    &#125;, <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;枚举类&quot;</span>).<span class="title function_">values</span>()); <span class="comment">// 输出值</span></span><br></pre></td></tr></table></figure><h3 id="获取所有类"><a href="#获取所有类" class="headerlink" title="获取所有类"></a>获取所有类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClassesSync</span>() <span class="comment">// 同步获取已加载所有类,返回一个数组</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>() <span class="comment">// 异步</span></span><br></pre></td></tr></table></figure><h4 id="加载类下所有方法，属性"><a href="#加载类下所有方法，属性" class="headerlink" title="加载类下所有方法，属性"></a>加载类下所有方法，属性</h4><p>使用到 Java 的反射</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Utils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.kuizuo.app.Utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> methods = <span class="title class_">Utils</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>() <span class="comment">// 方法</span></span><br><span class="line"><span class="keyword">const</span> constructors = <span class="title class_">Utils</span>.<span class="property">class</span>.<span class="title function_">getDeclaredConstructors</span>() <span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">const</span> fields = <span class="title class_">Utils</span>.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>() <span class="comment">// 字段</span></span><br><span class="line"><span class="keyword">const</span> classes = <span class="title class_">Utils</span>.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>() <span class="comment">// 内部类</span></span><br><span class="line"><span class="keyword">const</span> superClass = <span class="title class_">Utils</span>.<span class="property">class</span>.<span class="title function_">getSuperclass</span>() <span class="comment">// 父类(抽象类)</span></span><br><span class="line"><span class="keyword">const</span> interfaces = <span class="title class_">Utils</span>.<span class="property">class</span>.<span class="title function_">getInterfaces</span>() <span class="comment">// 所有接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> method <span class="keyword">of</span> methods) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(method.<span class="title function_">getName</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> class$ <span class="keyword">of</span> classes) &#123;</span><br><span class="line">  <span class="comment">// class$ 为类的字节码，无需.class</span></span><br><span class="line">  <span class="keyword">let</span> fields = <span class="keyword">class</span>$.<span class="title function_">getDeclaredFields</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> field <span class="keyword">of</span> fields) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(field.<span class="title function_">getName</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数堆栈的打印"><a href="#函数堆栈的打印" class="headerlink" title="函数堆栈的打印"></a>函数堆栈的打印</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showStack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.util.Log&#x27;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Throwable&#x27;</span>).$new()))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap-的打印"><a href="#HashMap-的打印" class="headerlink" title="HashMap 的打印"></a>HashMap 的打印</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RequestUtil</span>.<span class="property">paraMap</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.util.Map&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// // a是一个HashMap对象</span></span><br><span class="line">  <span class="keyword">let</span> key = a.<span class="title function_">keySet</span>()</span><br><span class="line">  <span class="keyword">let</span> it = key.<span class="title function_">iterator</span>()</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">while</span> (it.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line">    <span class="keyword">let</span> keystr = it.<span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">let</span> valuestr = a.<span class="title function_">get</span>(keystr)</span><br><span class="line">    <span class="comment">// keystr 与 valuestr 都是Java的对象，需要使用toString转成文本</span></span><br><span class="line">    <span class="comment">// 直接打印结果为 &lt;instance: java.lang.Object, $className: java.lang.String&gt;</span></span><br><span class="line">    obj[keystr.<span class="title function_">toString</span>()] = valuestr.<span class="title function_">toString</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj: &#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)) <span class="comment">// 将打印成js的对象</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">paraMap</span>(a)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安卓关键代码类"><a href="#安卓关键代码类" class="headerlink" title="安卓关键代码类"></a>安卓关键代码类</h3><table><thead><tr><th>类名</th><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>android.widget.Toast</td><td>show</td><td>弹窗提示</td></tr><tr><td>android.widget.EditText</td><td>getText</td><td>获取编辑框文本</td></tr><tr><td>java.lang.StringBuilder</td><td>toString</td><td>字符串获取与拼接</td></tr><tr><td>java.lang.String</td><td>toString&#x2F;getBytes</td><td>获取字符串与字符串字节</td></tr></tbody></table><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>写文件如果写入的不是私有空间的话，需要获取内部存储空间权限</p><p>私有空间 <code>/data/data/包名</code>、<code>/storage/emulated/0/Android/data/包名</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> current_application = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>).<span class="title function_">currentApplication</span>()</span><br><span class="line"><span class="keyword">let</span> context = current_application.<span class="title function_">getApplicationContext</span>()</span><br><span class="line"><span class="keyword">let</span> path = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.content.ContextWrapper&#x27;</span>).$new(context).<span class="title function_">getExternalFilesDir</span>(<span class="string">&#x27;Download&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path) <span class="comment">// 获取app的私有空间 /storage/emulated/0/Android/data/包名/files/Download</span></span><br><span class="line"><span class="keyword">let</span> file = <span class="keyword">new</span> <span class="title class_">File</span>(path + <span class="string">&#x27;/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.<span class="title function_">write</span>(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">file.<span class="title function_">flush</span>()</span><br><span class="line">file.<span class="title function_">close</span>()</span><br></pre></td></tr></table></figure><h3 id="修改类型"><a href="#修改类型" class="headerlink" title="修改类型"></a>修改类型</h3><p>Java.cast</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">utils.<span class="property">shufferMap2</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;map: &#x27;</span>, map) <span class="comment">// 传入的是HashMap对象，但是会向上转型为Map对象 输出[object Object]</span></span><br><span class="line">  <span class="keyword">var</span> hashMap = <span class="title class_">Java</span>.<span class="title function_">cast</span>(map, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.HashMap&#x27;</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hashMap: &#x27;</span>, hashMap)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">shufferMap2</span>(hashMap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建-Java-数组"><a href="#构建-Java-数组" class="headerlink" title="构建 Java 数组"></a>构建 Java 数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通字符串数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;Ljava.lang.String;&#x27;</span>, [<span class="string">&#x27;字符串1&#x27;</span>, <span class="string">&#x27;字符串2&#x27;</span>, <span class="string">&#x27;字符串3&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象数组</span></span><br><span class="line"><span class="keyword">let</span> integer = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Integer&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> boolean = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Boolean&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> objarr = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;Ljava.lang.Object;&#x27;</span>, [<span class="string">&#x27;字符串1&#x27;</span>, integer.$new(<span class="number">10</span>), boolean.$new(<span class="literal">true</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">// arrayList</span></span><br><span class="line"><span class="keyword">var</span> arrayList = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.ArrayList&#x27;</span>).$new()</span><br><span class="line"><span class="keyword">var</span> integer = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Integer&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> boolean = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Boolean&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.kuizuo.app.Person&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person = <span class="title class_">Person</span>.$new(<span class="string">&#x27;kuizuo&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">arrayList.<span class="title function_">add</span>(<span class="string">&#x27;kuizuo&#x27;</span>)</span><br><span class="line">arrayList.<span class="title function_">add</span>(integer.$new(<span class="number">10</span>))</span><br><span class="line">arrayList.<span class="title function_">add</span>(boolean.$new(<span class="literal">true</span>))</span><br><span class="line">arrayList.<span class="title function_">add</span>(person)</span><br></pre></td></tr></table></figure><p>注: 第一个参数类型给的是<code>Ljava.lang.String;</code> 而不是 <code>[Ljava.lang.String;</code></p><h4 id="指定函数下-hook-取消-hook"><a href="#指定函数下-hook-取消-hook" class="headerlink" title="指定函数下 hook(取消 hook)"></a>指定函数下 hook(取消 hook)</h4><p><code>HashMap.put.implementation = null</code> 取消对 HashMap.put 方法的 hook</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HashMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.HashMap&#x27;</span>)</span><br><span class="line"><span class="title class_">RequestUtil</span>.<span class="property">paraMap</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.util.Map&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// a是一个HashMap对象</span></span><br><span class="line">  <span class="title class_">HashMap</span>.<span class="property">put</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="comment">// 只在RequestUtil.paraMap方法调用的时候才会打印HashMap传入的参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">key</span>: key.<span class="title function_">toString</span>(), <span class="attr">value</span>: value.<span class="title function_">toString</span>() &#125;))</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title function_">put</span>(key, value)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">paraMap</span>(a)</span><br><span class="line">  <span class="title class_">HashMap</span>.<span class="property">put</span>.<span class="property">implementation</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dex-加载"><a href="#dex-加载" class="headerlink" title="dex 加载"></a>dex 加载</h3><h4 id="注入一个类-registerClass"><a href="#注入一个类-registerClass" class="headerlink" title="注入一个类 registerClass"></a>注入一个类 registerClass</h4><p><a href="https://frida.re/docs/javascript-api/#java-cast">JavaScript API | Frida • A world-class dynamic instrumentation framework</a></p><p>通常是加载某个类，复写某些方法，达到绕过的目的，如证书效验</p><p>但此方法相对繁琐，不如直接编写 java 代码编译成 dex 直接注入来的方便，也就有了 dex 的动态加载。</p><h4 id="DexClassLoader"><a href="#DexClassLoader" class="headerlink" title="DexClassLoader"></a>DexClassLoader</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(Java.enumerateLoadedClassesSync().join(&quot;\n&quot;));</span></span><br><span class="line">  <span class="comment">// var dynamic = Java.use(&quot;com.xiaojianbang.app.Dynamic&quot;);</span></span><br><span class="line">  <span class="comment">// console.log(dynamic);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Java.enumerateClassLoaders(&#123;</span></span><br><span class="line">  <span class="comment">//     onMatch: function (loader)&#123;</span></span><br><span class="line">  <span class="comment">//         try &#123;</span></span><br><span class="line">  <span class="comment">//             Java.classFactory.loader = loader;</span></span><br><span class="line">  <span class="comment">//             var dynamic = Java.use(&quot;com.xiaojianbang.app.Dynamic&quot;);</span></span><br><span class="line">  <span class="comment">//             console.log(&quot;dynamic: &quot;, dynamic);</span></span><br><span class="line">  <span class="comment">//             //console.log(dynamic.$new().sayHello());</span></span><br><span class="line">  <span class="comment">//             dynamic.sayHello.implementation = function () &#123;</span></span><br><span class="line">  <span class="comment">//                 console.log(&quot;hook dynamic.sayHello is run!&quot;);</span></span><br><span class="line">  <span class="comment">//                 return &quot;xiaojianbang&quot;;</span></span><br><span class="line">  <span class="comment">//             &#125;</span></span><br><span class="line">  <span class="comment">//         &#125;catch (e) &#123;</span></span><br><span class="line">  <span class="comment">//             console.log(loader);</span></span><br><span class="line">  <span class="comment">//         &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;, onComplete: function () &#123;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dexClassLoader = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;dalvik.system.DexClassLoader&#x27;</span>)</span><br><span class="line">  dexClassLoader.<span class="property">loadClass</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="comment">//console.log(className);</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">loadClass</span>(className)</span><br><span class="line">    <span class="comment">//console.log(&quot;class: &quot;, result);</span></span><br><span class="line">    <span class="comment">//console.log(&quot;class.class: &quot;, result.class);</span></span><br><span class="line">    <span class="comment">//console.log(&quot;xxxxxxxx: &quot;, result.getDeclaredMethods());</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;com.xiaojianbang.app.Dynamic&#x27;</span> === className) &#123;</span><br><span class="line">      <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">var</span> dynamic = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.xiaojianbang.app.Dynamic&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;dynamic: &#x27;</span>, dynamic)</span><br><span class="line">      <span class="comment">//var clazz = dynamic.class;</span></span><br><span class="line">      <span class="comment">//console.log(&quot;xxxxxxxx: &quot;, clazz.getDeclaredMethods()[0].invoke(clazz.newInstance(), []));</span></span><br><span class="line">      <span class="comment">//console.log(dynamic.$new().sayHello());</span></span><br><span class="line">      dynamic.<span class="property">sayHello</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;dynamic.sayHello is called&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;xiaojianbang&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(dynamic.$new().<span class="title function_">sayHello</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="dx"><a href="#dx" class="headerlink" title="dx"></a>dx</h3><p>bat: android\SDK\build-tools\sdk 版本\dx.bat</p><p>jar 包: android\SDK\build-tools\sdk 版本\lib\dx.jar</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dx --dex --output=C:\Users\zeyu\Desktop\com\output.dex C:\Users\zeyu\Desktop\com\*</span><br></pre></td></tr></table></figure><p><code>C:\Users\zeyu\Desktop\com\*</code>下存放 java 代码编译后的.class 将其转为 dex 文件，也可指定.class 文件</p><p>注: <code>C:\Users\zeyu\Desktop\com\*</code> 绝对路径可能会报错，可使用相对路径。</p><h4 id="baksmali-与-smali"><a href="#baksmali-与-smali" class="headerlink" title="baksmali 与 smali"></a>baksmali 与 smali</h4><p>github: <a href="https://github.com/JesusFreke/smali">JesusFreke&#x2F;smali: smali&#x2F;baksmali (github.com)</a></p><p>下载地址: <a href="https://bitbucket.org/JesusFreke/smali/downloads/">JesusFreke &#x2F; smali &#x2F; Downloads — Bitbucket</a></p><p>baksmali 将 dex 编译成 smali</p><p>smali 将 smali 编译成 dex</p><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><p>反编译 dex</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar baksmali-2.5.2.jar d classes.dex <span class="comment"># 将会生成out的文件夹</span></span><br></pre></td></tr></table></figure><p>回编译 dex</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar smali-2.5.2.jar a out <span class="comment"># 将会生成out.dex文件</span></span><br></pre></td></tr></table></figure><h4 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h4><p><a href="https://github.com/iBotPeaches/Apktool">iBotPeaches&#x2F;Apktool: A tool for reverse engineering Android apk files (github.com)</a></p><p>安装文档: <a href="https://ibotpeaches.github.io/Apktool/install/">Apktool - How to Install (ibotpeaches.github.io)</a></p><h4 id="apksigner"><a href="#apksigner" class="headerlink" title="apksigner"></a>apksigner</h4><p>jar 包: android\SDK\build-tools\sdk 版本\lib\apksigner.jar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apksigner sign --ks xxx.jks xxx.apk</span><br><span class="line">Keystore password for signer #1:</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h4 id="frida-注入-dex-文件"><a href="#frida-注入-dex-文件" class="headerlink" title="frida 注入 dex 文件"></a>frida 注入 dex 文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java.openClassFile(&quot;/data/local/tmp/xxx.dex&quot;).load();</span><br><span class="line"></span><br><span class="line">// 就可以在内存中使用加载后的类</span><br></pre></td></tr></table></figure><h2 id="脱离-PC-使用-frida"><a href="#脱离-PC-使用-frida" class="headerlink" title="脱离 PC 使用 frida"></a>脱离 PC 使用 frida</h2><h3 id="Termux"><a href="#Termux" class="headerlink" title="Termux"></a>Termux</h3><p>使用 Termux 终端，补齐 python，node 环境，相当于手机端运行电脑端的 frida，本质上与电脑端相同。</p><h3 id="frida-inject"><a href="#frida-inject" class="headerlink" title="frida-inject"></a>frida-inject</h3><p>同 fridaserver，下载 frida-inject 移动到手机上，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push C:\Users\kuizuo\Desktop\frida-inject-15.1.14-android-arm64 /data/local/tmp/fiarm64</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd data/local/tmp</span><br><span class="line">chmod 777 fiarm64</span><br></pre></td></tr></table></figure><h5 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h5><p>前提，hook 的 js 脚本也移动到 fiarm64 相同路径或指定路径。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./fiarm64 -n 包名 -s 脚本.js</span><br><span class="line">./fiarm64 -p pid -s 脚本.js <span class="comment"># ps -A 可查看pid</span></span><br></pre></td></tr></table></figure><p>可以加-e，–eternalize 使其在后台运行。</p><h3 id="frida-gadget-so"><a href="#frida-gadget-so" class="headerlink" title="frida-gadget.so"></a>frida-gadget.so</h3><p><strong>免 root 使用 frida</strong>，但需要重打包 app，比较稳定。可通过魔改系统，让系统帮我们注入 so，免去重打包的繁琐</p><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>abd、aapt、jarsigner、apksigner、apktool（这些都需要添加到环境变量中）</p><h5 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h5><p>使用到 objection patchapk 命令，选项如下</p><table><thead><tr><th>选项</th><th>例子</th><th>功能</th></tr></thead><tbody><tr><td>-s xxx.apk</td><td>-s xxx.apk</td><td>指定 apk 文件</td></tr><tr><td>-a so 版本</td><td>-a arm64-v8a</td><td>指定安卓 so 版本</td></tr><tr><td>-V frida-gadget 版本号</td><td>-V 15.1.14</td><td>指定 frida-gadget 版本号，默认最新</td></tr><tr><td>-d, –enable-debug</td><td>-d</td><td>是否允许调试</td></tr><tr><td>-c, –gadget-config TEXT</td><td>-c config.txt</td><td>加载<a href="https://frida.re/docs/gadget/#script">配置</a>方式打包</td></tr></tbody></table><p>frida-gadget 可能会下载失败，去 github 下载<a href="https://github.com/frida/frida/releases/download/15.1.14/frida-gadget-15.1.14-android-arm64.so.xz">frida-gadget-15.1.14-android-arm64.so.xz</a>，解压后将 gadget 文件更名<code>libfrida-gadget.so</code>为存放到<code>C:\Users\zeyu\.objection\android\arm64-v8a</code></p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection patchapk -a arm64-v8a -V 15.1.14 -s xxx.apk</span><br></pre></td></tr></table></figure><p>将会生成 xxx.objection.apk 文件，卸载原 app（与原 apk 签名不一样，无法覆盖安装），重新安装</p><p>重新打开将会进入白屏，正常现象，等待 frida 去连接，相当于 apk 中运行了一个 frida-server。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
# Frida 基础

&lt;h2 id=&quot;虚拟环境安装&quot;&gt;&lt;a href=&quot;#虚拟环境安装&quot; class=&quot;headerlink&quot; title=&quot;虚拟环境安装&quot;&gt;&lt;/a&gt;虚拟环境安装&lt;/h2</summary>
      
    
    
    
    <category term="笔记" scheme="http://qwd.ai/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Fida" scheme="http://qwd.ai/tags/Fida/"/>
    
  </entry>
  
  <entry>
    <title>安卓下 mount ‘/system‘ not in /proc/mounts</title>
    <link href="http://qwd.ai/2023/06/08/%E5%AE%89%E5%8D%93%E4%B8%8B-mount-%E2%80%98-system%E2%80%98-not-in-proc-mounts/"/>
    <id>http://qwd.ai/2023/06/08/%E5%AE%89%E5%8D%93%E4%B8%8B-mount-%E2%80%98-system%E2%80%98-not-in-proc-mounts/</id>
    <published>2023-06-08T11:14:51.000Z</published>
    <updated>2023-06-08T11:16:09.827Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.执行mount -o rw,remount -t auto &#x2F;system<br>2.还是报错’&#x2F;system’ not in &#x2F;proc&#x2F;mounts<br>3.改为mount -o rw,remount -t auto &#x2F;</p><p>如果遇到<br>‘&#x2F;dev&#x2F;root’ is read-only<br>说明你手机需要刷机了<br>我也是折腾了俩小时才解决的<br>参照这个网址，很顺利。<br><a href="https://blog.51cto.com/u_14202100/5082828">【Android】Pixel 2 Android 9 系统 ROOT 操作 ( TWRP 下载 | Magisk Manager 下载 | 线刷包下载 | 线刷 9.0 系统 | ROOT 操作 )</a></p><p>我用的是 pixel 2L 要选择好自己对应的系统</p><p>附图：<br><img src="https://img-blog.csdnimg.cn/b6099677d07f4e319e43980de4810046.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;


&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;1.执行mount -o r</summary>
      
    
    
    
    
    <category term="Android" scheme="http://qwd.ai/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Python3创建虚拟环境</title>
    <link href="http://qwd.ai/2023/06/08/Python3%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://qwd.ai/2023/06/08/Python3%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2023-06-08T11:14:04.000Z</published>
    <updated>2023-06-08T11:16:34.674Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="1-安装-virtualenv"><a href="#1-安装-virtualenv" class="headerlink" title="1. 安装 virtualenv"></a>1. 安装 virtualenv</h2><p><code>pip3 install virtualenv</code></p><h2 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2. 创建虚拟环境"></a>2. 创建虚拟环境</h2><p>首先进入到一个你要保存虚拟环境的地方<br>我个人之前用conda习惯了，所以就在python的根目录创建了一个叫env的环境<br><img src="https://img-blog.csdnimg.cn/37cd10799a07497e83716145b4e23b31.png" alt="在这里插入图片描述"><br>步骤如下：<br>1.终端进入到env文件夹下<br>打开终端<br><code>python -m virtualenv 虚拟环境名字</code><br>比如我创建的是exe<br>就是<code>python3 -m virtualenv exe</code><br>2.进入到exe目录下的Scripts目录，使用<code>activae</code>命令激活虚拟环境<br>激活后是这样的： 前面写着你虚拟环境的目录<br><img src="https://img-blog.csdnimg.cn/64949f22bb0b44ebbf31d11cc7194c40.png" alt="在这里插入图片描述"></p><h2 id="3-管理虚拟环境"><a href="#3-管理虚拟环境" class="headerlink" title="3. 管理虚拟环境"></a>3. 管理虚拟环境</h2><p>假如我创建了多个虚拟环境，难道每次都要先进到目录，然后敲activate激活？ 那太费劲了<br>解决方式<br>假如我现在有两个虚拟环境<br>exe 和 pandas</p><p><img src="https://img-blog.csdnimg.cn/740d38fd3591408082677f63c914c39b.png" alt="在这里插入图片描述"><br>以exe为例子，我把exe&#x2F;Scripts下的activae 文件改名为activate_exe 然后再将该文件夹移动到环境变量<br>pandas 虚拟环境同理</p><p>切记切记，一定要放在你原本的python环境变量路径的上方， 不然会覆盖，导致你全局的python就是个虚拟环境<br>（加入环境变量 这个就不演示了，不会的话百度）</p><h2 id="4-激活-x2F-切换虚拟环境"><a href="#4-激活-x2F-切换虚拟环境" class="headerlink" title="4. 激活&#x2F;切换虚拟环境"></a>4. 激活&#x2F;切换虚拟环境</h2><p>在任意文件夹下打开终端<br>输入activate_exe 我就能激活exe虚拟环境<br>如果要切换<br>敲 <code>deactivate</code>退出虚拟环境，在进别的就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;


&lt;h2 id=&quot;1-安装-virtualenv&quot;&gt;&lt;a href=&quot;#1-安装-virtualenv&quot; class=&quot;headerlink&quot; title=&quot;1. 安装 virtuale</summary>
      
    
    
    
    
    <category term="Python" scheme="http://qwd.ai/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Jieba按词性分词</title>
    <link href="http://qwd.ai/2023/06/08/Jieba%E6%8C%89%E8%AF%8D%E6%80%A7%E5%88%86%E8%AF%8D/"/>
    <id>http://qwd.ai/2023/06/08/Jieba%E6%8C%89%E8%AF%8D%E6%80%A7%E5%88%86%E8%AF%8D/</id>
    <published>2023-06-08T11:12:31.000Z</published>
    <updated>2023-06-08T11:16:25.667Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="去标点符号"><a href="#去标点符号" class="headerlink" title="去标点符号"></a>去标点符号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new = re.sub(<span class="string">r&#x27;[^\u4e00-\u9fa5]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, old)</span><br></pre></td></tr></table></figure><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> jp</span><br><span class="line">posseg = jp.cut(text)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> posseg:</span><br><span class="line">dic = &#123;<span class="string">&#x27;word&#x27;</span>: i.word, <span class="string">&#x27;flag&#x27;</span>: i.flag&#125; <span class="comment"># flag 是词性</span></span><br></pre></td></tr></table></figure><h2 id="词性"><a href="#词性" class="headerlink" title="词性"></a>词性</h2><p><img src="https://img-blog.csdnimg.cn/6a67e059b17d46c7be61c70661598fe2.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;


&lt;h2 id=&quot;去标点符号&quot;&gt;&lt;a href=&quot;#去标点符号&quot; class=&quot;headerlink&quot; title=&quot;去标点符号&quot;&gt;&lt;/a&gt;去标点符号&lt;/h2&gt;&lt;figure class</summary>
      
    
    
    
    
    <category term="自然语言处理" scheme="http://qwd.ai/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>loguru 如何把不同的日志写入不同的文件中</title>
    <link href="http://qwd.ai/2023/06/08/%E5%A6%82%E4%BD%95%E6%8A%8A%E4%B8%8D%E5%90%8C%E7%9A%84%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD/"/>
    <id>http://qwd.ai/2023/06/08/%E5%A6%82%E4%BD%95%E6%8A%8A%E4%B8%8D%E5%90%8C%E7%9A%84%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD/</id>
    <published>2023-06-08T11:09:42.000Z</published>
    <updated>2023-06-08T11:16:15.652Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="原本的写法"><a href="#原本的写法" class="headerlink" title="原本的写法"></a>原本的写法</h2><p>三个py三个logger，然后logger.add不同的文件名，不同的日志等级</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(<span class="string">f&#x27;./log/爬虫-基本.log&#x27;</span>, level=<span class="string">&#x27;DEBUG&#x27;</span>, rotation=<span class="string">&#x27;100 MB&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(<span class="string">f&#x27;./log/爬虫-速度.log&#x27;</span>, level=<span class="string">&#x27;TRACE&#x27;</span>, rotation=<span class="string">&#x27;100 MB&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是这种写法会造成一个问题：<br>高等级的日志信息会写进低等级的日志里<br>也就是说 debug的日志信息会写进trace里面，这样肯定是不行的</p><h2 id="改进的写法"><a href="#改进的写法" class="headerlink" title="改进的写法"></a>改进的写法</h2><p>注意到add函数有个过滤表达式<br>那么可以针对日志里面的内容进行过滤<br>当日志信息等级为trace的时候，那就把信息存入到速度.log中<br>其余日志因为等级都会比trace高。所以trace的日志不会进debug里面，是否过滤都无所谓<br>写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(<span class="string">f&#x27;./log/爬虫-速度.log&#x27;</span>, level=<span class="string">&#x27;TRACE&#x27;</span>, rotation=<span class="string">&#x27;100 MB&#x27;</span>, <span class="built_in">filter</span>=<span class="keyword">lambda</span> x:<span class="string">&#x27;TRACE&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x[<span class="string">&#x27;level&#x27;</span>]).upper())</span><br></pre></td></tr></table></figure><p>或者根据关键字过滤也可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(<span class="string">f&#x27;./log/爬虫-速度.log&#x27;</span>, level=<span class="string">&#x27;TRACE&#x27;</span>, rotation=<span class="string">&#x27;100 MB&#x27;</span>, <span class="built_in">filter</span>=<span class="keyword">lambda</span> x: <span class="string">&#x27;耗时&#x27;</span> <span class="keyword">in</span> x[<span class="string">&#x27;message&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;


&lt;h2 id=&quot;原本的写法&quot;&gt;&lt;a href=&quot;#原本的写法&quot; class=&quot;headerlink&quot; title=&quot;原本的写法&quot;&gt;&lt;/a&gt;原本的写法&lt;/h2&gt;&lt;p&gt;三个py三个logg</summary>
      
    
    
    
    
    <category term="其他" scheme="http://qwd.ai/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
